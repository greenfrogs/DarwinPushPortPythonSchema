#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Jul 22 23:53:50 2023 by generateDS.py version 2.42.2.
# Python 3.11.3 (tags/v3.11.3:f3909b8, Apr  4 2023, 23:49:59) [MSC v.1934 64 bit (AMD64)]
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
from lxml import etree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
TagNamePrefix = ""
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the _exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    try:
        from generatedssupersuper import GeneratedsSuperSuper
    except ModulenotfoundExp_ as exp:
        class GeneratedsSuperSuper(object):
            pass
    
    class GeneratedsSuper(GeneratedsSuperSuper):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def __str__(self):
            settings = {
                'str_pretty_print': True,
                'str_indent_level': 0,
                'str_namespaceprefix': '',
                'str_name': self.__class__.__name__,
                'str_namespacedefs': '',
            }
            for n in settings:
                if hasattr(self, n):
                    settings[n] = getattr(self, n)
            if sys.version_info.major == 2:
                from StringIO import StringIO
            else:
                from io import StringIO
            output = StringIO()
            self.export(
                output,
                settings['str_indent_level'],
                pretty_print=settings['str_pretty_print'],
                namespaceprefix_=settings['str_namespaceprefix'],
                name_=settings['str_name'],
                namespacedef_=settings['str_namespacedefs']
            )
            strval = output.getvalue()
            output.close()
            return strval
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data).decode('ascii')
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % int(input_data)
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            value = ('%.15f' % float(input_data)).rstrip('0')
            if value.endswith('.'):
                value += '0'
            return value
    
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            input_data = input_data.strip()
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            target = str(target)
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    s1 = s1.replace('\n', '&#10;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

from .rttiPPTAlarms_v1 import RTTIAlarm
from .rttiPPTForecasts_v1 import TS
from .rttiPPTForecasts_v1 import TrainOrder
from .rttiPPTSchedules_v1 import Association
from .rttiPPTSchedules_v1 import DeactivatedSchedule
from .rttiPPTSchedules_v1 import Schedule
from .rttiPPTSchema_v11 import DataResponse
from .rttiPPTStationMessages_v1 import StationMessage
from .rttiPPTTDData_v1 import TrackingID
from .rttiPPTTrainAlerts_v1 import TrainAlert

class DataResponse(GeneratedsSuper):
    """schedule -- Train Schedule
    deactivated -- Notification that a Train Schedule is now deactivated in Darwin.
    association -- Association between schedules
    TS -- Train Status
    OW -- Darwin Workstation Station Message
    trainAlert -- Train Alert
    trainOrder -- The order that trains are expected to call/pass a particular station platform
    trackingID -- Indicate a corrected Tracking ID (headcode) for a service in a TD berth.
    alarm -- A Darwin alarm
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, schedule=None, deactivated=None, association=None, TS=None, OW=None, trainAlert=None, trainOrder=None, trackingID=None, alarm=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if schedule is None:
            self.schedule = []
        else:
            self.schedule = schedule
        self.schedule_nsprefix_ = None
        if deactivated is None:
            self.deactivated = []
        else:
            self.deactivated = deactivated
        self.deactivated_nsprefix_ = None
        if association is None:
            self.association = []
        else:
            self.association = association
        self.association_nsprefix_ = None
        if TS is None:
            self.TS = []
        else:
            self.TS = TS
        self.TS_nsprefix_ = None
        if OW is None:
            self.OW = []
        else:
            self.OW = OW
        self.OW_nsprefix_ = None
        if trainAlert is None:
            self.trainAlert = []
        else:
            self.trainAlert = trainAlert
        self.trainAlert_nsprefix_ = None
        if trainOrder is None:
            self.trainOrder = []
        else:
            self.trainOrder = trainOrder
        self.trainOrder_nsprefix_ = None
        if trackingID is None:
            self.trackingID = []
        else:
            self.trackingID = trackingID
        self.trackingID_nsprefix_ = None
        if alarm is None:
            self.alarm = []
        else:
            self.alarm = alarm
        self.alarm_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataResponse.subclass:
            return DataResponse.subclass(*args_, **kwargs_)
        else:
            return DataResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_schedule(self):
        return self.schedule
    def set_schedule(self, schedule):
        self.schedule = schedule
    def add_schedule(self, value):
        self.schedule.append(value)
    def insert_schedule_at(self, index, value):
        self.schedule.insert(index, value)
    def replace_schedule_at(self, index, value):
        self.schedule[index] = value
    def get_deactivated(self):
        return self.deactivated
    def set_deactivated(self, deactivated):
        self.deactivated = deactivated
    def add_deactivated(self, value):
        self.deactivated.append(value)
    def insert_deactivated_at(self, index, value):
        self.deactivated.insert(index, value)
    def replace_deactivated_at(self, index, value):
        self.deactivated[index] = value
    def get_association(self):
        return self.association
    def set_association(self, association):
        self.association = association
    def add_association(self, value):
        self.association.append(value)
    def insert_association_at(self, index, value):
        self.association.insert(index, value)
    def replace_association_at(self, index, value):
        self.association[index] = value
    def get_TS(self):
        return self.TS
    def set_TS(self, TS):
        self.TS = TS
    def add_TS(self, value):
        self.TS.append(value)
    def insert_TS_at(self, index, value):
        self.TS.insert(index, value)
    def replace_TS_at(self, index, value):
        self.TS[index] = value
    def get_OW(self):
        return self.OW
    def set_OW(self, OW):
        self.OW = OW
    def add_OW(self, value):
        self.OW.append(value)
    def insert_OW_at(self, index, value):
        self.OW.insert(index, value)
    def replace_OW_at(self, index, value):
        self.OW[index] = value
    def get_trainAlert(self):
        return self.trainAlert
    def set_trainAlert(self, trainAlert):
        self.trainAlert = trainAlert
    def add_trainAlert(self, value):
        self.trainAlert.append(value)
    def insert_trainAlert_at(self, index, value):
        self.trainAlert.insert(index, value)
    def replace_trainAlert_at(self, index, value):
        self.trainAlert[index] = value
    def get_trainOrder(self):
        return self.trainOrder
    def set_trainOrder(self, trainOrder):
        self.trainOrder = trainOrder
    def add_trainOrder(self, value):
        self.trainOrder.append(value)
    def insert_trainOrder_at(self, index, value):
        self.trainOrder.insert(index, value)
    def replace_trainOrder_at(self, index, value):
        self.trainOrder[index] = value
    def get_trackingID(self):
        return self.trackingID
    def set_trackingID(self, trackingID):
        self.trackingID = trackingID
    def add_trackingID(self, value):
        self.trackingID.append(value)
    def insert_trackingID_at(self, index, value):
        self.trackingID.insert(index, value)
    def replace_trackingID_at(self, index, value):
        self.trackingID[index] = value
    def get_alarm(self):
        return self.alarm
    def set_alarm(self, alarm):
        self.alarm = alarm
    def add_alarm(self, value):
        self.alarm.append(value)
    def insert_alarm_at(self, index, value):
        self.alarm.insert(index, value)
    def replace_alarm_at(self, index, value):
        self.alarm[index] = value
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def has__content(self):
        if (
            self.schedule or
            self.deactivated or
            self.association or
            self.TS or
            self.OW or
            self.trainAlert or
            self.trainOrder or
            self.trackingID or
            self.alarm
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11" xmlns:sch="http://www.thalesgroup.com/rtti/PushPort/Schedules/v1"  xmlns:for="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v1"  xmlns:sm="http://www.thalesgroup.com/rtti/PushPort/StationMessages/v1"  xmlns:ta="http://www.thalesgroup.com/rtti/PushPort/TrainAlerts/v1"  xmlns:td="http://www.thalesgroup.com/rtti/PushPort/TDData/v1"  xmlns:alm="http://www.thalesgroup.com/rtti/PushPort/Alarms/v1" ', name_='DataResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DataResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataResponse')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataResponse'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11" xmlns:sch="http://www.thalesgroup.com/rtti/PushPort/Schedules/v1"  xmlns:for="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v1"  xmlns:sm="http://www.thalesgroup.com/rtti/PushPort/StationMessages/v1"  xmlns:ta="http://www.thalesgroup.com/rtti/PushPort/TrainAlerts/v1"  xmlns:td="http://www.thalesgroup.com/rtti/PushPort/TDData/v1"  xmlns:alm="http://www.thalesgroup.com/rtti/PushPort/Alarms/v1" ', name_='DataResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for schedule_ in self.schedule:
            namespaceprefix_ = self.schedule_nsprefix_ + ':' if (UseCapturedNS_ and self.schedule_nsprefix_) else ''
            schedule_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='schedule', pretty_print=pretty_print)
        for deactivated_ in self.deactivated:
            namespaceprefix_ = self.deactivated_nsprefix_ + ':' if (UseCapturedNS_ and self.deactivated_nsprefix_) else ''
            deactivated_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='deactivated', pretty_print=pretty_print)
        for association_ in self.association:
            namespaceprefix_ = self.association_nsprefix_ + ':' if (UseCapturedNS_ and self.association_nsprefix_) else ''
            association_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='association', pretty_print=pretty_print)
        for TS_ in self.TS:
            namespaceprefix_ = self.TS_nsprefix_ + ':' if (UseCapturedNS_ and self.TS_nsprefix_) else ''
            TS_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TS', pretty_print=pretty_print)
        for OW_ in self.OW:
            namespaceprefix_ = self.OW_nsprefix_ + ':' if (UseCapturedNS_ and self.OW_nsprefix_) else ''
            OW_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OW', pretty_print=pretty_print)
        for trainAlert_ in self.trainAlert:
            namespaceprefix_ = self.trainAlert_nsprefix_ + ':' if (UseCapturedNS_ and self.trainAlert_nsprefix_) else ''
            trainAlert_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='trainAlert', pretty_print=pretty_print)
        for trainOrder_ in self.trainOrder:
            namespaceprefix_ = self.trainOrder_nsprefix_ + ':' if (UseCapturedNS_ and self.trainOrder_nsprefix_) else ''
            trainOrder_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='trainOrder', pretty_print=pretty_print)
        for trackingID_ in self.trackingID:
            namespaceprefix_ = self.trackingID_nsprefix_ + ':' if (UseCapturedNS_ and self.trackingID_nsprefix_) else ''
            trackingID_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='trackingID', pretty_print=pretty_print)
        for alarm_ in self.alarm:
            namespaceprefix_ = self.alarm_nsprefix_ + ':' if (UseCapturedNS_ and self.alarm_nsprefix_) else ''
            alarm_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='alarm', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'schedule':
            obj_ = Schedule.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.schedule.append(obj_)
            obj_.original_tagname_ = 'schedule'
        elif nodeName_ == 'deactivated':
            obj_ = DeactivatedSchedule.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.deactivated.append(obj_)
            obj_.original_tagname_ = 'deactivated'
        elif nodeName_ == 'association':
            obj_ = Association.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.association.append(obj_)
            obj_.original_tagname_ = 'association'
        elif nodeName_ == 'TS':
            obj_ = TS.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TS.append(obj_)
            obj_.original_tagname_ = 'TS'
        elif nodeName_ == 'OW':
            obj_ = StationMessage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OW.append(obj_)
            obj_.original_tagname_ = 'OW'
        elif nodeName_ == 'trainAlert':
            obj_ = TrainAlert.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.trainAlert.append(obj_)
            obj_.original_tagname_ = 'trainAlert'
        elif nodeName_ == 'trainOrder':
            obj_ = TrainOrder.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.trainOrder.append(obj_)
            obj_.original_tagname_ = 'trainOrder'
        elif nodeName_ == 'trackingID':
            obj_ = TrackingID.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.trackingID.append(obj_)
            obj_.original_tagname_ = 'trackingID'
        elif nodeName_ == 'alarm':
            obj_ = RTTIAlarm.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.alarm.append(obj_)
            obj_.original_tagname_ = 'alarm'
# end class DataResponse


class Pport(GeneratedsSuper):
    """Pport -- Push Ports Schema
    ts -- Local Timestamp
    QueryTimetable -- Query for the current timetable ID
    TimeTableId -- Response for the current timetable ID
    GetSnapshotReq -- Request a standard snapshot of current database
    viaftp -- If true, then resulting snapshot data is fetched by the client via FTP
    GetFullSnapshotReq -- Request a full snapshot of current database
    viaftp -- If true, then resulting snapshot data is fetched by the client via FTP
    SnapshotId -- Defines an ID for recovering snapshot data via FTP
    StartUpdateReq -- Start sending available updates.
    StopUpdateReq -- Stop sending available updates.
    FailureResp -- Failure Response
    requestSource -- The DCIS source that generated this update
    requestID -- The DCISRequestID value provided by the originator of this update. Used in conjunction with the updateSource attribute to ensure uniqueness
    uR -- Update Response
    requestSource -- The DCIS source that generated this update
    requestID -- The DCISRequestID value provided by the originator of this update. Used in conjunction with the updateSource attribute to ensure uniqueness
    sR -- Snapshot Response
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ts=None, version=None, QueryTimetable=None, TimeTableId=None, GetSnapshotReq=None, GetFullSnapshotReq=None, SnapshotId=None, StartUpdateReq=None, StopUpdateReq=None, FailureResp=None, uR=None, sR=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ts = _cast(None, ts)
        self.ts_nsprefix_ = None
        self.version = _cast(None, version)
        self.version_nsprefix_ = None
        self.QueryTimetable = QueryTimetable
        self.QueryTimetable_nsprefix_ = None
        self.TimeTableId = TimeTableId
        self.TimeTableId_nsprefix_ = None
        self.GetSnapshotReq = GetSnapshotReq
        self.GetSnapshotReq_nsprefix_ = None
        self.GetFullSnapshotReq = GetFullSnapshotReq
        self.GetFullSnapshotReq_nsprefix_ = None
        self.SnapshotId = SnapshotId
        self.validate_SnapshotIDType(self.SnapshotId)
        self.SnapshotId_nsprefix_ = None
        self.StartUpdateReq = StartUpdateReq
        self.StartUpdateReq_nsprefix_ = None
        self.StopUpdateReq = StopUpdateReq
        self.StopUpdateReq_nsprefix_ = None
        self.FailureResp = FailureResp
        self.FailureResp_nsprefix_ = None
        self.uR = uR
        self.uR_nsprefix_ = None
        self.sR = sR
        self.sR_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Pport)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Pport.subclass:
            return Pport.subclass(*args_, **kwargs_)
        else:
            return Pport(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_QueryTimetable(self):
        return self.QueryTimetable
    def set_QueryTimetable(self, QueryTimetable):
        self.QueryTimetable = QueryTimetable
    def get_TimeTableId(self):
        return self.TimeTableId
    def set_TimeTableId(self, TimeTableId):
        self.TimeTableId = TimeTableId
    def get_GetSnapshotReq(self):
        return self.GetSnapshotReq
    def set_GetSnapshotReq(self, GetSnapshotReq):
        self.GetSnapshotReq = GetSnapshotReq
    def get_GetFullSnapshotReq(self):
        return self.GetFullSnapshotReq
    def set_GetFullSnapshotReq(self, GetFullSnapshotReq):
        self.GetFullSnapshotReq = GetFullSnapshotReq
    def get_SnapshotId(self):
        return self.SnapshotId
    def set_SnapshotId(self, SnapshotId):
        self.SnapshotId = SnapshotId
    def get_StartUpdateReq(self):
        return self.StartUpdateReq
    def set_StartUpdateReq(self, StartUpdateReq):
        self.StartUpdateReq = StartUpdateReq
    def get_StopUpdateReq(self):
        return self.StopUpdateReq
    def set_StopUpdateReq(self, StopUpdateReq):
        self.StopUpdateReq = StopUpdateReq
    def get_FailureResp(self):
        return self.FailureResp
    def set_FailureResp(self, FailureResp):
        self.FailureResp = FailureResp
    def get_uR(self):
        return self.uR
    def set_uR(self, uR):
        self.uR = uR
    def get_sR(self):
        return self.sR
    def set_sR(self, sR):
        self.sR = sR
    def get_ts(self):
        return self.ts
    def set_ts(self, ts):
        self.ts = ts
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def validate_SnapshotIDType(self, value):
        result = True
        # Validate type SnapshotIDType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SnapshotIDType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RTTIDateTimeType(self, value):
        # Validate type ct:RTTIDateTimeType, a restriction on xs:dateTime.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.datetime):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.datetime)' % {"value": value, "lineno": lineno, })
                return False
            pass
    def has__content(self):
        if (
            self.QueryTimetable is not None or
            self.TimeTableId is not None or
            self.GetSnapshotReq is not None or
            self.GetFullSnapshotReq is not None or
            self.SnapshotId is not None or
            self.StartUpdateReq is not None or
            self.StopUpdateReq is not None or
            self.FailureResp is not None or
            self.uR is not None or
            self.sR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11" xmlns:None="http://www.thalesgroup.com/rtti/PushPort/CommonTypes/v1"  xmlns:ct="http://www.thalesgroup.com/rtti/PushPort/CommonTypes/v1" ', name_='Pport', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Pport')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Pport':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Pport')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Pport', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Pport'):
        if self.ts is not None and 'ts' not in already_processed:
            already_processed.add('ts')
            outfile.write(' ts="%s"' % self.gds_format_datetime(self.ts, input_name='ts'))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.version), input_name='version')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11" xmlns:None="http://www.thalesgroup.com/rtti/PushPort/CommonTypes/v1"  xmlns:ct="http://www.thalesgroup.com/rtti/PushPort/CommonTypes/v1" ', name_='Pport', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.QueryTimetable is not None:
            namespaceprefix_ = self.QueryTimetable_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryTimetable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQueryTimetable>%s</%sQueryTimetable>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QueryTimetable), input_name='QueryTimetable')), namespaceprefix_ , eol_))
        if self.TimeTableId is not None:
            namespaceprefix_ = self.TimeTableId_nsprefix_ + ':' if (UseCapturedNS_ and self.TimeTableId_nsprefix_) else ''
            self.TimeTableId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TimeTableId', pretty_print=pretty_print)
        if self.GetSnapshotReq is not None:
            namespaceprefix_ = self.GetSnapshotReq_nsprefix_ + ':' if (UseCapturedNS_ and self.GetSnapshotReq_nsprefix_) else ''
            self.GetSnapshotReq.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GetSnapshotReq', pretty_print=pretty_print)
        if self.GetFullSnapshotReq is not None:
            namespaceprefix_ = self.GetFullSnapshotReq_nsprefix_ + ':' if (UseCapturedNS_ and self.GetFullSnapshotReq_nsprefix_) else ''
            self.GetFullSnapshotReq.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GetFullSnapshotReq', pretty_print=pretty_print)
        if self.SnapshotId is not None:
            namespaceprefix_ = self.SnapshotId_nsprefix_ + ':' if (UseCapturedNS_ and self.SnapshotId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSnapshotId>%s</%sSnapshotId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SnapshotId), input_name='SnapshotId')), namespaceprefix_ , eol_))
        if self.StartUpdateReq is not None:
            namespaceprefix_ = self.StartUpdateReq_nsprefix_ + ':' if (UseCapturedNS_ and self.StartUpdateReq_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStartUpdateReq>%s</%sStartUpdateReq>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StartUpdateReq), input_name='StartUpdateReq')), namespaceprefix_ , eol_))
        if self.StopUpdateReq is not None:
            namespaceprefix_ = self.StopUpdateReq_nsprefix_ + ':' if (UseCapturedNS_ and self.StopUpdateReq_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStopUpdateReq>%s</%sStopUpdateReq>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StopUpdateReq), input_name='StopUpdateReq')), namespaceprefix_ , eol_))
        if self.FailureResp is not None:
            namespaceprefix_ = self.FailureResp_nsprefix_ + ':' if (UseCapturedNS_ and self.FailureResp_nsprefix_) else ''
            self.FailureResp.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FailureResp', pretty_print=pretty_print)
        if self.uR is not None:
            namespaceprefix_ = self.uR_nsprefix_ + ':' if (UseCapturedNS_ and self.uR_nsprefix_) else ''
            self.uR.export(outfile, level, namespaceprefix_, namespacedef_='', name_='uR', pretty_print=pretty_print)
        if self.sR is not None:
            namespaceprefix_ = self.sR_nsprefix_ + ':' if (UseCapturedNS_ and self.sR_nsprefix_) else ''
            self.sR.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sR', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ts', node)
        if value is not None and 'ts' not in already_processed:
            already_processed.add('ts')
            try:
                self.ts = self.gds_parse_datetime(value)
            except ValueError as exp:
                raise ValueError('Bad date-time attribute (ts): %s' % exp)
            self.validate_RTTIDateTimeType(self.ts)    # validate type RTTIDateTimeType
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'QueryTimetable':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QueryTimetable')
            value_ = self.gds_validate_string(value_, node, 'QueryTimetable')
            self.QueryTimetable = value_
            self.QueryTimetable_nsprefix_ = child_.prefix
        elif nodeName_ == 'TimeTableId':
            obj_ = TimeTableId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TimeTableId = obj_
            obj_.original_tagname_ = 'TimeTableId'
        elif nodeName_ == 'GetSnapshotReq':
            obj_ = GetSnapshotReq.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GetSnapshotReq = obj_
            obj_.original_tagname_ = 'GetSnapshotReq'
        elif nodeName_ == 'GetFullSnapshotReq':
            obj_ = GetFullSnapshotReq.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GetFullSnapshotReq = obj_
            obj_.original_tagname_ = 'GetFullSnapshotReq'
        elif nodeName_ == 'SnapshotId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SnapshotId')
            value_ = self.gds_validate_string(value_, node, 'SnapshotId')
            self.SnapshotId = value_
            self.SnapshotId_nsprefix_ = child_.prefix
            # validate type SnapshotIDType
            self.validate_SnapshotIDType(self.SnapshotId)
        elif nodeName_ == 'StartUpdateReq':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StartUpdateReq')
            value_ = self.gds_validate_string(value_, node, 'StartUpdateReq')
            self.StartUpdateReq = value_
            self.StartUpdateReq_nsprefix_ = child_.prefix
        elif nodeName_ == 'StopUpdateReq':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StopUpdateReq')
            value_ = self.gds_validate_string(value_, node, 'StopUpdateReq')
            self.StopUpdateReq = value_
            self.StopUpdateReq_nsprefix_ = child_.prefix
        elif nodeName_ == 'FailureResp':
            obj_ = FailureResp.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FailureResp = obj_
            obj_.original_tagname_ = 'FailureResp'
        elif nodeName_ == 'uR':
            obj_ = uR.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.uR = obj_
            obj_.original_tagname_ = 'uR'
        elif nodeName_ == 'sR':
            class_obj_ = self.get_class_obj_(child_, DataResponse)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sR = obj_
            obj_.original_tagname_ = 'sR'
# end class Pport


class QueryTimetable(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QueryTimetable)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QueryTimetable.subclass:
            return QueryTimetable.subclass(*args_, **kwargs_)
        else:
            return QueryTimetable(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='QueryTimetable', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('QueryTimetable')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'QueryTimetable':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='QueryTimetable')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='QueryTimetable', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='QueryTimetable'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='QueryTimetable', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class QueryTimetable


class TimeTableId(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ttfile=None, ttreffile=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ttfile = _cast(None, ttfile)
        self.ttfile_nsprefix_ = None
        self.ttreffile = _cast(None, ttreffile)
        self.ttreffile_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TimeTableId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TimeTableId.subclass:
            return TimeTableId.subclass(*args_, **kwargs_)
        else:
            return TimeTableId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ttfile(self):
        return self.ttfile
    def set_ttfile(self, ttfile):
        self.ttfile = ttfile
    def get_ttreffile(self):
        return self.ttreffile
    def set_ttreffile(self, ttreffile):
        self.ttreffile = ttreffile
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_TimetableIDType(self, value):
        result = True
        # Validate type TimetableIDType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on TimetableIDType' % {"value": encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_TimetableFilenameType(self, value):
        # Validate type ct:TimetableFilenameType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 128:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TimetableFilenameType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TimetableFilenameType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='TimeTableId', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TimeTableId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TimeTableId':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TimeTableId')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TimeTableId'):
        if self.ttfile is not None and 'ttfile' not in already_processed:
            already_processed.add('ttfile')
            outfile.write(' ttfile=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ttfile), input_name='ttfile')), ))
        if self.ttreffile is not None and 'ttreffile' not in already_processed:
            already_processed.add('ttreffile')
            outfile.write(' ttreffile=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ttreffile), input_name='ttreffile')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='TimeTableId', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ttfile', node)
        if value is not None and 'ttfile' not in already_processed:
            already_processed.add('ttfile')
            self.ttfile = value
            self.validate_TimetableFilenameType(self.ttfile)    # validate type TimetableFilenameType
        value = find_attr_value_('ttreffile', node)
        if value is not None and 'ttreffile' not in already_processed:
            already_processed.add('ttreffile')
            self.ttreffile = value
            self.validate_TimetableFilenameType(self.ttreffile)    # validate type TimetableFilenameType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class TimeTableId


class GetSnapshotReq(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, viaftp=False, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.viaftp = _cast(bool, viaftp)
        self.viaftp_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetSnapshotReq)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetSnapshotReq.subclass:
            return GetSnapshotReq.subclass(*args_, **kwargs_)
        else:
            return GetSnapshotReq(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_viaftp(self):
        return self.viaftp
    def set_viaftp(self, viaftp):
        self.viaftp = viaftp
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='GetSnapshotReq', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetSnapshotReq')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetSnapshotReq':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetSnapshotReq')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetSnapshotReq', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetSnapshotReq'):
        if self.viaftp and 'viaftp' not in already_processed:
            already_processed.add('viaftp')
            outfile.write(' viaftp="%s"' % self.gds_format_boolean(self.viaftp, input_name='viaftp'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='GetSnapshotReq', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('viaftp', node)
        if value is not None and 'viaftp' not in already_processed:
            already_processed.add('viaftp')
            if value in ('true', '1'):
                self.viaftp = True
            elif value in ('false', '0'):
                self.viaftp = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class GetSnapshotReq


class GetFullSnapshotReq(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, viaftp=False, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.viaftp = _cast(bool, viaftp)
        self.viaftp_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetFullSnapshotReq)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetFullSnapshotReq.subclass:
            return GetFullSnapshotReq.subclass(*args_, **kwargs_)
        else:
            return GetFullSnapshotReq(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_viaftp(self):
        return self.viaftp
    def set_viaftp(self, viaftp):
        self.viaftp = viaftp
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='GetFullSnapshotReq', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetFullSnapshotReq')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetFullSnapshotReq':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetFullSnapshotReq')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetFullSnapshotReq', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetFullSnapshotReq'):
        if self.viaftp and 'viaftp' not in already_processed:
            already_processed.add('viaftp')
            outfile.write(' viaftp="%s"' % self.gds_format_boolean(self.viaftp, input_name='viaftp'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='GetFullSnapshotReq', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('viaftp', node)
        if value is not None and 'viaftp' not in already_processed:
            already_processed.add('viaftp')
            if value in ('true', '1'):
                self.viaftp = True
            elif value in ('false', '0'):
                self.viaftp = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class GetFullSnapshotReq


class StartUpdateReq(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StartUpdateReq)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StartUpdateReq.subclass:
            return StartUpdateReq.subclass(*args_, **kwargs_)
        else:
            return StartUpdateReq(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='StartUpdateReq', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StartUpdateReq')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StartUpdateReq':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StartUpdateReq')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StartUpdateReq', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StartUpdateReq'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='StartUpdateReq', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class StartUpdateReq


class StopUpdateReq(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StopUpdateReq)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StopUpdateReq.subclass:
            return StopUpdateReq.subclass(*args_, **kwargs_)
        else:
            return StopUpdateReq(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='StopUpdateReq', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StopUpdateReq')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StopUpdateReq':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StopUpdateReq')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StopUpdateReq', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StopUpdateReq'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='StopUpdateReq', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class StopUpdateReq


class FailureResp(StatusType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = StatusType
    def __init__(self, code=None, requestSource=None, requestID=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("FailureResp"), self).__init__(code, valueOf_,  **kwargs_)
        self.requestSource = _cast(None, requestSource)
        self.requestSource_nsprefix_ = None
        self.requestID = _cast(None, requestID)
        self.requestID_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FailureResp)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FailureResp.subclass:
            return FailureResp.subclass(*args_, **kwargs_)
        else:
            return FailureResp(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_requestSource(self):
        return self.requestSource
    def set_requestSource(self, requestSource):
        self.requestSource = requestSource
    def get_requestID(self):
        return self.requestID
    def set_requestID(self, requestID):
        self.requestID = requestID
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_SourceTypeInst(self, value):
        # Validate type ct:SourceTypeInst, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on SourceTypeInst' % {"value": encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_DCISRequestID(self, value):
        # Validate type ct:DCISRequestID, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 16:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DCISRequestID' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DCISRequestID' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_DCISRequestID_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_DCISRequestID_patterns_, ))
    validate_DCISRequestID_patterns_ = [['^([-_A-Za-z0-9]{1,16})$']]
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(FailureResp, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='FailureResp', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FailureResp')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FailureResp':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FailureResp')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FailureResp'):
        super(FailureResp, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FailureResp')
        if self.requestSource is not None and 'requestSource' not in already_processed:
            already_processed.add('requestSource')
            outfile.write(' requestSource=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.requestSource), input_name='requestSource')), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.add('requestID')
            outfile.write(' requestID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.requestID), input_name='requestID')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='FailureResp', fromsubclass_=False, pretty_print=True):
        super(FailureResp, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestSource', node)
        if value is not None and 'requestSource' not in already_processed:
            already_processed.add('requestSource')
            self.requestSource = value
            self.validate_SourceTypeInst(self.requestSource)    # validate type SourceTypeInst
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.add('requestID')
            self.requestID = value
            self.validate_DCISRequestID(self.requestID)    # validate type DCISRequestID
        super(FailureResp, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class FailureResp


class uR(DataResponse):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DataResponse
    def __init__(self, schedule=None, deactivated=None, association=None, TS=None, OW=None, trainAlert=None, trainOrder=None, trackingID=None, alarm=None, requestSource=None, requestID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("uR"), self).__init__(schedule, deactivated, association, TS, OW, trainAlert, trainOrder, trackingID, alarm,  **kwargs_)
        self.requestSource = _cast(None, requestSource)
        self.requestSource_nsprefix_ = None
        self.requestID = _cast(None, requestID)
        self.requestID_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, uR)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if uR.subclass:
            return uR.subclass(*args_, **kwargs_)
        else:
            return uR(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_requestSource(self):
        return self.requestSource
    def set_requestSource(self, requestSource):
        self.requestSource = requestSource
    def get_requestID(self):
        return self.requestID
    def set_requestID(self, requestID):
        self.requestID = requestID
    def validate_SourceTypeInst(self, value):
        # Validate type ct:SourceTypeInst, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on SourceTypeInst' % {"value": encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_DCISRequestID(self, value):
        # Validate type ct:DCISRequestID, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 16:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DCISRequestID' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DCISRequestID' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_DCISRequestID_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_DCISRequestID_patterns_, ))
    validate_DCISRequestID_patterns_ = [['^([-_A-Za-z0-9]{1,16})$']]
    def has__content(self):
        if (
            super(uR, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='uR', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('uR')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'uR':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='uR')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='uR', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='uR'):
        super(uR, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='uR')
        if self.requestSource is not None and 'requestSource' not in already_processed:
            already_processed.add('requestSource')
            outfile.write(' requestSource=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.requestSource), input_name='requestSource')), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.add('requestID')
            outfile.write(' requestID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.requestID), input_name='requestID')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"', name_='uR', fromsubclass_=False, pretty_print=True):
        super(uR, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestSource', node)
        if value is not None and 'requestSource' not in already_processed:
            already_processed.add('requestSource')
            self.requestSource = value
            self.validate_SourceTypeInst(self.requestSource)    # validate type SourceTypeInst
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.add('requestID')
            self.requestID = value
            self.validate_DCISRequestID(self.requestID)    # validate type DCISRequestID
        super(uR, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(uR, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class uR


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    prefix_tag = TagNamePrefix + tag
    rootClass = GDSClassesMapping.get(prefix_tag)
    if rootClass is None:
        rootClass = globals().get(prefix_tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DataResponse'
        rootClass = DataResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, reverse_mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DataResponse'
        rootClass = DataResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if mapping is None:
        mapping = {}
    if reverse_mapping is None:
        reverse_mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping,
        reverse_mapping_=reverse_mapping, nsmap_=nsmap)
    reverse_node_mapping = rootObj.gds_reverse_node_mapping(mapping)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_node_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DataResponse'
        rootClass = DataResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v11"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DataResponse'
        rootClass = DataResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from rttiPPTSchema_v11 import *\n\n')
        sys.stdout.write('import rttiPPTSchema_v11 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {

}
__all__ = [
    "AlertService",
    "AlertServices",
    "AssocService",
    "Association",
    "DT",
    "DataResponse",
    "DeactivatedSchedule",
    "DisruptionReasonType",
    "FailureResp",
    "FullTDBerthID",
    "GetFullSnapshotReq",
    "GetSnapshotReq",
    "IP",
    "Msg",
    "OPDT",
    "OPIP",
    "OPOR",
    "OR",
    "PP",
    "PPConnect",
    "PPReqVersion",
    "PPStatus",
    "PlatformData",
    "Pport",
    "QueryTimetable",
    "RTTIAlarm",
    "RTTIAlarmData",
    "Schedule",
    "StartUpdateReq",
    "Station",
    "StationMessage",
    "StatusType",
    "StopUpdateReq",
    "TS",
    "TSLocation",
    "TSTimeData",
    "TimeTableId",
    "TrackingID",
    "TrainAlert",
    "TrainOrder",
    "TrainOrderData",
    "TrainOrderItem",
    "a",
    "clear",
    "p",
    "rid",
    "tdFeedFail",
    "tyrellFeedFail",
    "uR"
]
