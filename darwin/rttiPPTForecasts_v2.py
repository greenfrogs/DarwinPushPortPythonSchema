#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Jul 22 23:53:50 2023 by generateDS.py version 2.42.2.
# Python 3.11.3 (tags/v3.11.3:f3909b8, Apr  4 2023, 23:49:59) [MSC v.1934 64 bit (AMD64)]
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
from lxml import etree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
TagNamePrefix = ""
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the _exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    try:
        from generatedssupersuper import GeneratedsSuperSuper
    except ModulenotfoundExp_ as exp:
        class GeneratedsSuperSuper(object):
            pass
    
    class GeneratedsSuper(GeneratedsSuperSuper):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def __str__(self):
            settings = {
                'str_pretty_print': True,
                'str_indent_level': 0,
                'str_namespaceprefix': '',
                'str_name': self.__class__.__name__,
                'str_namespacedefs': '',
            }
            for n in settings:
                if hasattr(self, n):
                    settings[n] = getattr(self, n)
            if sys.version_info.major == 2:
                from StringIO import StringIO
            else:
                from io import StringIO
            output = StringIO()
            self.export(
                output,
                settings['str_indent_level'],
                pretty_print=settings['str_pretty_print'],
                namespaceprefix_=settings['str_namespaceprefix'],
                name_=settings['str_name'],
                namespacedef_=settings['str_namespacedefs']
            )
            strval = output.getvalue()
            output.close()
            return strval
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data).decode('ascii')
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % int(input_data)
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            value = ('%.15f' % float(input_data)).rstrip('0')
            if value.endswith('.'):
                value += '0'
            return value
    
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            input_data = input_data.strip()
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            target = str(target)
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    s1 = s1.replace('\n', '&#10;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

from .rttiPPTCommonTypes_v1 import DisruptionReasonType
from .rttiPPTForecasts_v2 import PlatformData
from .rttiPPTForecasts_v2 import TS
from .rttiPPTForecasts_v2 import TSLocation
from .rttiPPTForecasts_v2 import TSTimeData

class PlatformData(GeneratedsSuper):
    """PlatformData -- Platform number with associated flags
    platsup -- Platform number is suppressed and should not be displayed.
    cisPlatsup -- Whether a CIS, or Darwin Workstation, has set platform suppression at this location.
    platsrc -- The source of the platfom number. P = Planned, A = Automatic, M = Manual.
    conf -- True if the platform number is confirmed.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, platsup=False, cisPlatsup=False, platsrc='P', conf=False, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.platsup = _cast(bool, platsup)
        self.platsup_nsprefix_ = None
        self.cisPlatsup = _cast(bool, cisPlatsup)
        self.cisPlatsup_nsprefix_ = None
        self.platsrc = _cast(None, platsrc)
        self.platsrc_nsprefix_ = None
        self.conf = _cast(bool, conf)
        self.conf_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PlatformData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PlatformData.subclass:
            return PlatformData.subclass(*args_, **kwargs_)
        else:
            return PlatformData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_platsup(self):
        return self.platsup
    def set_platsup(self, platsup):
        self.platsup = platsup
    def get_cisPlatsup(self):
        return self.cisPlatsup
    def set_cisPlatsup(self, cisPlatsup):
        self.cisPlatsup = cisPlatsup
    def get_platsrc(self):
        return self.platsrc
    def set_platsrc(self, platsrc):
        self.platsrc = platsrc
    def get_conf(self):
        return self.conf
    def set_conf(self, conf):
        self.conf = conf
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_PlatformType(self, value):
        result = True
        # Validate type PlatformType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='tns:', namespacedef_='xmlns:for="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v2" xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v2"', name_='PlatformData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PlatformData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PlatformData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PlatformData')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='tns:', name_='PlatformData'):
        if self.platsup and 'platsup' not in already_processed:
            already_processed.add('platsup')
            outfile.write(' platsup="%s"' % self.gds_format_boolean(self.platsup, input_name='platsup'))
        if self.cisPlatsup and 'cisPlatsup' not in already_processed:
            already_processed.add('cisPlatsup')
            outfile.write(' cisPlatsup="%s"' % self.gds_format_boolean(self.cisPlatsup, input_name='cisPlatsup'))
        if self.platsrc != "P" and 'platsrc' not in already_processed:
            already_processed.add('platsrc')
            outfile.write(' platsrc=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.platsrc), input_name='platsrc')), ))
        if self.conf and 'conf' not in already_processed:
            already_processed.add('conf')
            outfile.write(' conf="%s"' % self.gds_format_boolean(self.conf, input_name='conf'))
    def _exportChildren(self, outfile, level, namespaceprefix_='tns:', namespacedef_='xmlns:for="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v2" xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v2"', name_='PlatformData', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('platsup', node)
        if value is not None and 'platsup' not in already_processed:
            already_processed.add('platsup')
            if value in ('true', '1'):
                self.platsup = True
            elif value in ('false', '0'):
                self.platsup = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('cisPlatsup', node)
        if value is not None and 'cisPlatsup' not in already_processed:
            already_processed.add('cisPlatsup')
            if value in ('true', '1'):
                self.cisPlatsup = True
            elif value in ('false', '0'):
                self.cisPlatsup = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('platsrc', node)
        if value is not None and 'platsrc' not in already_processed:
            already_processed.add('platsrc')
            self.platsrc = value
        value = find_attr_value_('conf', node)
        if value is not None and 'conf' not in already_processed:
            already_processed.add('conf')
            if value in ('true', '1'):
                self.conf = True
            elif value in ('false', '0'):
                self.conf = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class PlatformData


class TSTimeData(GeneratedsSuper):
    """TSTimeData -- Type describing time-based forecast attributes for a TS arrival/departure/pass
    et -- Estimated Time. For locations that are public stops, this will be based on the "public schedule". For operational stops and passing locations, it will be based on the "working schedule". It is only published where there is a corresponding "activity" for the service.
    wet -- The estimated time based on the "working schedule". This will only be set for public stops when (i) it also differs from the estimated time based on the "public schedule", or (ii) where there is an operational "activity" but no public "activity".
    at -- Actual Time
    atRemoved -- If true, indicates that an actual time ("at") value has just been removed and replaced by an estimated time ("et"). Note that this attribute will only be set to "true" once, when the actual time is removed, and will not be set in any snapshot.
    etmin -- The manually applied lower limit that has been applied to the estimated time at this location. The estimated time will not be set lower than this value, but may be set higher.
    etUnknown -- Indicates that an unknown delay forecast has been set for the estimated time at this location. Note that this value indicates where a manual unknown delay forecast has been set, whereas it is the "delayed" attribute that indicates that the actual forecast is "unknown delay".
    delayed -- Indicates that this estimated time is a forecast of "unknown delay". Displayed  as "Delayed" in LDB. Note that this value indicates that this forecast is "unknown delay", whereas it is the "etUnknown" attribute that indicates where the manual unknown delay forecast has been set.
    src -- The source of the forecast or actual time.
    srcInst -- The RTTI CIS code of the CIS instance if the src is a CIS.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, et=None, wet=None, at=None, atRemoved=False, etmin=None, etUnknown=False, delayed=False, src=None, srcInst=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.et = _cast(None, et)
        self.et_nsprefix_ = None
        self.wet = _cast(None, wet)
        self.wet_nsprefix_ = None
        self.at = _cast(None, at)
        self.at_nsprefix_ = None
        self.atRemoved = _cast(bool, atRemoved)
        self.atRemoved_nsprefix_ = None
        self.etmin = _cast(None, etmin)
        self.etmin_nsprefix_ = None
        self.etUnknown = _cast(bool, etUnknown)
        self.etUnknown_nsprefix_ = None
        self.delayed = _cast(bool, delayed)
        self.delayed_nsprefix_ = None
        self.src = _cast(None, src)
        self.src_nsprefix_ = None
        self.srcInst = _cast(None, srcInst)
        self.srcInst_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TSTimeData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TSTimeData.subclass:
            return TSTimeData.subclass(*args_, **kwargs_)
        else:
            return TSTimeData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_et(self):
        return self.et
    def set_et(self, et):
        self.et = et
    def get_wet(self):
        return self.wet
    def set_wet(self, wet):
        self.wet = wet
    def get_at(self):
        return self.at
    def set_at(self, at):
        self.at = at
    def get_atRemoved(self):
        return self.atRemoved
    def set_atRemoved(self, atRemoved):
        self.atRemoved = atRemoved
    def get_etmin(self):
        return self.etmin
    def set_etmin(self, etmin):
        self.etmin = etmin
    def get_etUnknown(self):
        return self.etUnknown
    def set_etUnknown(self, etUnknown):
        self.etUnknown = etUnknown
    def get_delayed(self):
        return self.delayed
    def set_delayed(self, delayed):
        self.delayed = delayed
    def get_src(self):
        return self.src
    def set_src(self, src):
        self.src = src
    def get_srcInst(self):
        return self.srcInst
    def set_srcInst(self, srcInst):
        self.srcInst = srcInst
    def validate_RTTITimeType(self, value):
        # Validate type ct:RTTITimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_RTTITimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_RTTITimeType_patterns_, ))
    validate_RTTITimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9])$']]
    def validate_SourceTypeInst(self, value):
        # Validate type ct:SourceTypeInst, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on SourceTypeInst' % {"value": encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='tns:', namespacedef_='xmlns:for="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v2" xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v2"', name_='TSTimeData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TSTimeData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TSTimeData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TSTimeData')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TSTimeData', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='tns:', name_='TSTimeData'):
        if self.et is not None and 'et' not in already_processed:
            already_processed.add('et')
            outfile.write(' et=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.et), input_name='et')), ))
        if self.wet is not None and 'wet' not in already_processed:
            already_processed.add('wet')
            outfile.write(' wet=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wet), input_name='wet')), ))
        if self.at is not None and 'at' not in already_processed:
            already_processed.add('at')
            outfile.write(' at=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.at), input_name='at')), ))
        if self.atRemoved and 'atRemoved' not in already_processed:
            already_processed.add('atRemoved')
            outfile.write(' atRemoved="%s"' % self.gds_format_boolean(self.atRemoved, input_name='atRemoved'))
        if self.etmin is not None and 'etmin' not in already_processed:
            already_processed.add('etmin')
            outfile.write(' etmin=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.etmin), input_name='etmin')), ))
        if self.etUnknown and 'etUnknown' not in already_processed:
            already_processed.add('etUnknown')
            outfile.write(' etUnknown="%s"' % self.gds_format_boolean(self.etUnknown, input_name='etUnknown'))
        if self.delayed and 'delayed' not in already_processed:
            already_processed.add('delayed')
            outfile.write(' delayed="%s"' % self.gds_format_boolean(self.delayed, input_name='delayed'))
        if self.src is not None and 'src' not in already_processed:
            already_processed.add('src')
            outfile.write(' src=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.src), input_name='src')), ))
        if self.srcInst is not None and 'srcInst' not in already_processed:
            already_processed.add('srcInst')
            outfile.write(' srcInst=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.srcInst), input_name='srcInst')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='tns:', namespacedef_='xmlns:for="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v2" xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v2"', name_='TSTimeData', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('et', node)
        if value is not None and 'et' not in already_processed:
            already_processed.add('et')
            self.et = value
            self.validate_RTTITimeType(self.et)    # validate type RTTITimeType
        value = find_attr_value_('wet', node)
        if value is not None and 'wet' not in already_processed:
            already_processed.add('wet')
            self.wet = value
            self.validate_RTTITimeType(self.wet)    # validate type RTTITimeType
        value = find_attr_value_('at', node)
        if value is not None and 'at' not in already_processed:
            already_processed.add('at')
            self.at = value
            self.validate_RTTITimeType(self.at)    # validate type RTTITimeType
        value = find_attr_value_('atRemoved', node)
        if value is not None and 'atRemoved' not in already_processed:
            already_processed.add('atRemoved')
            if value in ('true', '1'):
                self.atRemoved = True
            elif value in ('false', '0'):
                self.atRemoved = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('etmin', node)
        if value is not None and 'etmin' not in already_processed:
            already_processed.add('etmin')
            self.etmin = value
            self.validate_RTTITimeType(self.etmin)    # validate type RTTITimeType
        value = find_attr_value_('etUnknown', node)
        if value is not None and 'etUnknown' not in already_processed:
            already_processed.add('etUnknown')
            if value in ('true', '1'):
                self.etUnknown = True
            elif value in ('false', '0'):
                self.etUnknown = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('delayed', node)
        if value is not None and 'delayed' not in already_processed:
            already_processed.add('delayed')
            if value in ('true', '1'):
                self.delayed = True
            elif value in ('false', '0'):
                self.delayed = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('src', node)
        if value is not None and 'src' not in already_processed:
            already_processed.add('src')
            self.src = value
        value = find_attr_value_('srcInst', node)
        if value is not None and 'srcInst' not in already_processed:
            already_processed.add('srcInst')
            self.srcInst = value
            self.validate_SourceTypeInst(self.srcInst)    # validate type SourceTypeInst
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class TSTimeData


class TSLocation(GeneratedsSuper):
    """TSLocation -- Forecast data for an individual location in the service's schedule
    tpl -- TIPLOC
    arr -- Forecast data for the arrival at this location
    dep -- Forecast data for the departure at this location
    pass -- Forecast data for the pass of this location
    plat -- Current platform number
    suppr -- The service is suppressed at this location.
    length -- The length of the service at this location on departure (or arrival at destination). The default value of zero indicates that the length is unknown.
    detachFront -- Indicates from which end of the train stock will be detached. The value is set to "true" if stock will be detached from the front of the train at this location. It will be set at each location where stock will be detached from the front. Darwin will not validate that a stock detachment activity code applies at this location.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, tpl=None, wta=None, wtd=None, wtp=None, pta=None, ptd=None, arr=None, dep=None, pass_=None, plat=None, suppr=False, length=0, detachFront=False, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.tpl = _cast(None, tpl)
        self.tpl_nsprefix_ = None
        self.wta = _cast(None, wta)
        self.wta_nsprefix_ = None
        self.wtd = _cast(None, wtd)
        self.wtd_nsprefix_ = None
        self.wtp = _cast(None, wtp)
        self.wtp_nsprefix_ = None
        self.pta = _cast(None, pta)
        self.pta_nsprefix_ = None
        self.ptd = _cast(None, ptd)
        self.ptd_nsprefix_ = None
        self.arr = arr
        self.arr_nsprefix_ = None
        self.dep = dep
        self.dep_nsprefix_ = None
        self.pass_ = pass_
        self.pass__nsprefix_ = None
        self.plat = plat
        self.plat_nsprefix_ = None
        self.suppr = suppr
        self.suppr_nsprefix_ = None
        self.length = length
        self.validate_TrainLengthType(self.length)
        self.length_nsprefix_ = None
        self.detachFront = detachFront
        self.detachFront_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TSLocation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TSLocation.subclass:
            return TSLocation.subclass(*args_, **kwargs_)
        else:
            return TSLocation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_arr(self):
        return self.arr
    def set_arr(self, arr):
        self.arr = arr
    def get_dep(self):
        return self.dep
    def set_dep(self, dep):
        self.dep = dep
    def get_pass(self):
        return self.pass_
    def set_pass(self, pass_):
        self.pass_ = pass_
    def get_plat(self):
        return self.plat
    def set_plat(self, plat):
        self.plat = plat
    def get_suppr(self):
        return self.suppr
    def set_suppr(self, suppr):
        self.suppr = suppr
    def get_length(self):
        return self.length
    def set_length(self, length):
        self.length = length
    def get_detachFront(self):
        return self.detachFront
    def set_detachFront(self, detachFront):
        self.detachFront = detachFront
    def get_tpl(self):
        return self.tpl
    def set_tpl(self, tpl):
        self.tpl = tpl
    def get_wta(self):
        return self.wta
    def set_wta(self, wta):
        self.wta = wta
    def get_wtd(self):
        return self.wtd
    def set_wtd(self, wtd):
        self.wtd = wtd
    def get_wtp(self):
        return self.wtp
    def set_wtp(self, wtp):
        self.wtp = wtp
    def get_pta(self):
        return self.pta
    def set_pta(self, pta):
        self.pta = pta
    def get_ptd(self):
        return self.ptd
    def set_ptd(self, ptd):
        self.ptd = ptd
    def validate_TrainLengthType(self, value):
        result = True
        # Validate type TrainLengthType, a restriction on xs:unsignedShort.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value > 99:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxInclusive restriction on TrainLengthType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_TiplocType(self, value):
        # Validate type ct:TiplocType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_WTimeType(self, value):
        # Validate type tns:WTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_WTimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_WTimeType_patterns_, ))
    validate_WTimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?)$']]
    def validate_RTTITimeType(self, value):
        # Validate type tns:RTTITimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_RTTITimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_RTTITimeType_patterns_, ))
    validate_RTTITimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9])$']]
    def has__content(self):
        if (
            self.arr is not None or
            self.dep is not None or
            self.pass_ is not None or
            self.plat is not None or
            self.suppr or
            self.length != 0 or
            self.detachFront
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='tns:', namespacedef_='xmlns:for="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v2" xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v12"  xmlns:None="http://www.thalesgroup.com/rtti/PushPort/CommonTypes/v1"  xmlns:ct="http://www.thalesgroup.com/rtti/PushPort/CommonTypes/v1" ', name_='TSLocation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TSLocation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TSLocation':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TSLocation')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TSLocation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='tns:', name_='TSLocation'):
        if self.tpl is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            outfile.write(' tpl=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.tpl), input_name='tpl')), ))
        if self.wta is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            outfile.write(' wta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wta), input_name='wta')), ))
        if self.wtd is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            outfile.write(' wtd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wtd), input_name='wtd')), ))
        if self.wtp is not None and 'wtp' not in already_processed:
            already_processed.add('wtp')
            outfile.write(' wtp=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wtp), input_name='wtp')), ))
        if self.pta is not None and 'pta' not in already_processed:
            already_processed.add('pta')
            outfile.write(' pta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.pta), input_name='pta')), ))
        if self.ptd is not None and 'ptd' not in already_processed:
            already_processed.add('ptd')
            outfile.write(' ptd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ptd), input_name='ptd')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='tns:', namespacedef_='xmlns:for="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v2" xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v12"  xmlns:None="http://www.thalesgroup.com/rtti/PushPort/CommonTypes/v1"  xmlns:ct="http://www.thalesgroup.com/rtti/PushPort/CommonTypes/v1" ', name_='TSLocation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.arr is not None:
            namespaceprefix_ = self.arr_nsprefix_ + ':' if (UseCapturedNS_ and self.arr_nsprefix_) else ''
            self.arr.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arr', pretty_print=pretty_print)
        if self.dep is not None:
            namespaceprefix_ = self.dep_nsprefix_ + ':' if (UseCapturedNS_ and self.dep_nsprefix_) else ''
            self.dep.export(outfile, level, namespaceprefix_, namespacedef_='', name_='dep', pretty_print=pretty_print)
        if self.pass_ is not None:
            namespaceprefix_ = self.pass__nsprefix_ + ':' if (UseCapturedNS_ and self.pass__nsprefix_) else ''
            self.pass_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='pass', pretty_print=pretty_print)
        if self.plat is not None:
            namespaceprefix_ = self.plat_nsprefix_ + ':' if (UseCapturedNS_ and self.plat_nsprefix_) else ''
            self.plat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='plat', pretty_print=pretty_print)
        if self.suppr:
            namespaceprefix_ = self.suppr_nsprefix_ + ':' if (UseCapturedNS_ and self.suppr_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssuppr>%s</%ssuppr>%s' % (namespaceprefix_ , self.gds_format_boolean(self.suppr, input_name='suppr'), namespaceprefix_ , eol_))
        if self.length != 0:
            namespaceprefix_ = self.length_nsprefix_ + ':' if (UseCapturedNS_ and self.length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slength>%s</%slength>%s' % (namespaceprefix_ , self.gds_format_integer(self.length, input_name='length'), namespaceprefix_ , eol_))
        if self.detachFront:
            namespaceprefix_ = self.detachFront_nsprefix_ + ':' if (UseCapturedNS_ and self.detachFront_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdetachFront>%s</%sdetachFront>%s' % (namespaceprefix_ , self.gds_format_boolean(self.detachFront, input_name='detachFront'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('tpl', node)
        if value is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            self.tpl = value
            self.validate_TiplocType(self.tpl)    # validate type TiplocType
        value = find_attr_value_('wta', node)
        if value is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            self.wta = value
            self.validate_WTimeType(self.wta)    # validate type WTimeType
        value = find_attr_value_('wtd', node)
        if value is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            self.wtd = value
            self.validate_WTimeType(self.wtd)    # validate type WTimeType
        value = find_attr_value_('wtp', node)
        if value is not None and 'wtp' not in already_processed:
            already_processed.add('wtp')
            self.wtp = value
            self.validate_WTimeType(self.wtp)    # validate type WTimeType
        value = find_attr_value_('pta', node)
        if value is not None and 'pta' not in already_processed:
            already_processed.add('pta')
            self.pta = value
            self.validate_RTTITimeType(self.pta)    # validate type RTTITimeType
        value = find_attr_value_('ptd', node)
        if value is not None and 'ptd' not in already_processed:
            already_processed.add('ptd')
            self.ptd = value
            self.validate_RTTITimeType(self.ptd)    # validate type RTTITimeType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'arr':
            obj_ = TSTimeData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arr = obj_
            obj_.original_tagname_ = 'arr'
        elif nodeName_ == 'dep':
            obj_ = TSTimeData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.dep = obj_
            obj_.original_tagname_ = 'dep'
        elif nodeName_ == 'pass':
            obj_ = TSTimeData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.pass_ = obj_
            obj_.original_tagname_ = 'pass'
        elif nodeName_ == 'plat':
            obj_ = PlatformData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.plat = obj_
            obj_.original_tagname_ = 'plat'
        elif nodeName_ == 'suppr':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'suppr')
            ival_ = self.gds_validate_boolean(ival_, node, 'suppr')
            self.suppr = ival_
            self.suppr_nsprefix_ = child_.prefix
        elif nodeName_ == 'length' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'length')
            ival_ = self.gds_validate_integer(ival_, node, 'length')
            self.length = ival_
            self.length_nsprefix_ = child_.prefix
            # validate type TrainLengthType
            self.validate_TrainLengthType(self.length)
        elif nodeName_ == 'detachFront':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'detachFront')
            ival_ = self.gds_validate_boolean(ival_, node, 'detachFront')
            self.detachFront = ival_
            self.detachFront_nsprefix_ = child_.prefix
# end class TSLocation


class TS(GeneratedsSuper):
    """TS -- Train Status. Update to the "real time" forecast data for a service.
    rid -- RTTI unique Train Identifier
    uid -- Train UID
    ssd -- Scheduled Start Date
    isReverseFormation -- Indicates whether a train that divides is working with portions in reverse to their normal formation. The value applies to the whole train. Darwin will not validate that a divide association actually exists for this service.
    LateReason -- Late running reason for this service. The reason applies to all locations of this service.
    Location -- Update of forecast data for an individual location in the service's schedule
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, rid=None, uid=None, ssd=None, isReverseFormation=False, LateReason=None, Location=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.rid = _cast(None, rid)
        self.rid_nsprefix_ = None
        self.uid = _cast(None, uid)
        self.uid_nsprefix_ = None
        self.ssd = _cast(None, ssd)
        self.ssd_nsprefix_ = None
        self.isReverseFormation = _cast(bool, isReverseFormation)
        self.isReverseFormation_nsprefix_ = None
        self.LateReason = LateReason
        self.LateReason_nsprefix_ = None
        if Location is None:
            self.Location = []
        else:
            self.Location = Location
        self.Location_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TS)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TS.subclass:
            return TS.subclass(*args_, **kwargs_)
        else:
            return TS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LateReason(self):
        return self.LateReason
    def set_LateReason(self, LateReason):
        self.LateReason = LateReason
    def get_Location(self):
        return self.Location
    def set_Location(self, Location):
        self.Location = Location
    def add_Location(self, value):
        self.Location.append(value)
    def insert_Location_at(self, index, value):
        self.Location.insert(index, value)
    def replace_Location_at(self, index, value):
        self.Location[index] = value
    def get_rid(self):
        return self.rid
    def set_rid(self, rid):
        self.rid = rid
    def get_uid(self):
        return self.uid
    def set_uid(self, uid):
        self.uid = uid
    def get_ssd(self):
        return self.ssd
    def set_ssd(self, ssd):
        self.ssd = ssd
    def get_isReverseFormation(self):
        return self.isReverseFormation
    def set_isReverseFormation(self, isReverseFormation):
        self.isReverseFormation = isReverseFormation
    def validate_RIDType(self, value):
        # Validate type ct:RIDType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 16:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on RIDType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_UIDType(self, value):
        # Validate type ct:UIDType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on UIDType' % {"value": encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_RTTIDateType(self, value):
        # Validate type ct:RTTIDateType, a restriction on xs:date.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
    def has__content(self):
        if (
            self.LateReason is not None or
            self.Location
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='tns:', namespacedef_='xmlns:for="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v2" xmlns:ct="http://www.thalesgroup.com/rtti/PushPort/CommonTypes/v1"  xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v12" ', name_='TS', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TS')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TS':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TS')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='tns:', name_='TS'):
        if self.rid is not None and 'rid' not in already_processed:
            already_processed.add('rid')
            outfile.write(' rid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.rid), input_name='rid')), ))
        if self.uid is not None and 'uid' not in already_processed:
            already_processed.add('uid')
            outfile.write(' uid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.uid), input_name='uid')), ))
        if self.ssd is not None and 'ssd' not in already_processed:
            already_processed.add('ssd')
            outfile.write(' ssd="%s"' % self.gds_format_date(self.ssd, input_name='ssd'))
        if self.isReverseFormation and 'isReverseFormation' not in already_processed:
            already_processed.add('isReverseFormation')
            outfile.write(' isReverseFormation="%s"' % self.gds_format_boolean(self.isReverseFormation, input_name='isReverseFormation'))
    def _exportChildren(self, outfile, level, namespaceprefix_='tns:', namespacedef_='xmlns:for="http://www.thalesgroup.com/rtti/PushPort/Forecasts/v2" xmlns:ct="http://www.thalesgroup.com/rtti/PushPort/CommonTypes/v1"  xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v12" ', name_='TS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LateReason is not None:
            namespaceprefix_ = self.LateReason_nsprefix_ + ':' if (UseCapturedNS_ and self.LateReason_nsprefix_) else ''
            self.LateReason.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LateReason', pretty_print=pretty_print)
        for Location_ in self.Location:
            namespaceprefix_ = self.Location_nsprefix_ + ':' if (UseCapturedNS_ and self.Location_nsprefix_) else ''
            Location_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Location', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('rid', node)
        if value is not None and 'rid' not in already_processed:
            already_processed.add('rid')
            self.rid = value
            self.validate_RIDType(self.rid)    # validate type RIDType
        value = find_attr_value_('uid', node)
        if value is not None and 'uid' not in already_processed:
            already_processed.add('uid')
            self.uid = value
            self.validate_UIDType(self.uid)    # validate type UIDType
        value = find_attr_value_('ssd', node)
        if value is not None and 'ssd' not in already_processed:
            already_processed.add('ssd')
            try:
                self.ssd = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (ssd): %s' % exp)
            self.validate_RTTIDateType(self.ssd)    # validate type RTTIDateType
        value = find_attr_value_('isReverseFormation', node)
        if value is not None and 'isReverseFormation' not in already_processed:
            already_processed.add('isReverseFormation')
            if value in ('true', '1'):
                self.isReverseFormation = True
            elif value in ('false', '0'):
                self.isReverseFormation = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LateReason':
            obj_ = DisruptionReasonType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LateReason = obj_
            obj_.original_tagname_ = 'LateReason'
        elif nodeName_ == 'Location':
            obj_ = TSLocation.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Location.append(obj_)
            obj_.original_tagname_ = 'Location'
# end class TS


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    prefix_tag = TagNamePrefix + tag
    rootClass = GDSClassesMapping.get(prefix_tag)
    if rootClass is None:
        rootClass = globals().get(prefix_tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PlatformData'
        rootClass = PlatformData
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, reverse_mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PlatformData'
        rootClass = PlatformData
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if mapping is None:
        mapping = {}
    if reverse_mapping is None:
        reverse_mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping,
        reverse_mapping_=reverse_mapping, nsmap_=nsmap)
    reverse_node_mapping = rootObj.gds_reverse_node_mapping(mapping)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_node_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PlatformData'
        rootClass = PlatformData
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/PushPort/v12"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PlatformData'
        rootClass = PlatformData
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from rttiPPTForecasts_v2 import *\n\n')
        sys.stdout.write('import rttiPPTForecasts_v2 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {

}
__all__ = [
    "AssocService",
    "Association",
    "DT",
    "DeactivatedSchedule",
    "DisruptionReasonType",
    "IP",
    "OPDT",
    "OPIP",
    "OPOR",
    "OR",
    "PP",
    "PPConnect",
    "PPReqVersion",
    "PPStatus",
    "PlatformData",
    "Schedule",
    "StatusType",
    "TS",
    "TSLocation",
    "TSTimeData"
]
