#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Jul 22 23:53:45 2023 by generateDS.py version 2.42.2.
# Python 3.11.3 (tags/v3.11.3:f3909b8, Apr  4 2023, 23:49:59) [MSC v.1934 64 bit (AMD64)]
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
from lxml import etree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
TagNamePrefix = ""
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the _exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    try:
        from generatedssupersuper import GeneratedsSuperSuper
    except ModulenotfoundExp_ as exp:
        class GeneratedsSuperSuper(object):
            pass
    
    class GeneratedsSuper(GeneratedsSuperSuper):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def __str__(self):
            settings = {
                'str_pretty_print': True,
                'str_indent_level': 0,
                'str_namespaceprefix': '',
                'str_name': self.__class__.__name__,
                'str_namespacedefs': '',
            }
            for n in settings:
                if hasattr(self, n):
                    settings[n] = getattr(self, n)
            if sys.version_info.major == 2:
                from StringIO import StringIO
            else:
                from io import StringIO
            output = StringIO()
            self.export(
                output,
                settings['str_indent_level'],
                pretty_print=settings['str_pretty_print'],
                namespaceprefix_=settings['str_namespaceprefix'],
                name_=settings['str_name'],
                namespacedef_=settings['str_namespacedefs']
            )
            strval = output.getvalue()
            output.close()
            return strval
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data).decode('ascii')
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % int(input_data)
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            value = ('%.15f' % float(input_data)).rstrip('0')
            if value.endswith('.'):
                value += '0'
            return value
    
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            input_data = input_data.strip()
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            target = str(target)
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    s1 = s1.replace('\n', '&#10;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

from .rttiCTTSchema_v8 import AssocService
from .rttiCTTSchema_v8 import Association
from .rttiCTTSchema_v8 import DT
from .rttiCTTSchema_v8 import IP
from .rttiCTTSchema_v8 import OPDT
from .rttiCTTSchema_v8 import OPIP
from .rttiCTTSchema_v8 import OPOR
from .rttiCTTSchema_v8 import OR
from .rttiCTTSchema_v8 import PP
from .rttiCTTSchema_v8 import Schedule
from .rttiPPTCommonTypes_v1 import DisruptionReasonType

class AssocService(GeneratedsSuper):
    """rid -- RTTI Train ID. Note that since this is an RID, the service must already exist within Darwin.
    AssocService -- One or more scheduled times to identify the instance of the location in the train schedule where the association occurs.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, rid=None, wta=None, wtd=None, wtp=None, pta=None, ptd=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.rid = _cast(None, rid)
        self.rid_nsprefix_ = None
        self.wta = _cast(None, wta)
        self.wta_nsprefix_ = None
        self.wtd = _cast(None, wtd)
        self.wtd_nsprefix_ = None
        self.wtp = _cast(None, wtp)
        self.wtp_nsprefix_ = None
        self.pta = _cast(None, pta)
        self.pta_nsprefix_ = None
        self.ptd = _cast(None, ptd)
        self.ptd_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssocService)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssocService.subclass:
            return AssocService.subclass(*args_, **kwargs_)
        else:
            return AssocService(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_rid(self):
        return self.rid
    def set_rid(self, rid):
        self.rid = rid
    def get_wta(self):
        return self.wta
    def set_wta(self, wta):
        self.wta = wta
    def get_wtd(self):
        return self.wtd
    def set_wtd(self, wtd):
        self.wtd = wtd
    def get_wtp(self):
        return self.wtp
    def set_wtp(self, wtp):
        self.wtp = wtp
    def get_pta(self):
        return self.pta
    def set_pta(self, pta):
        self.pta = pta
    def get_ptd(self):
        return self.ptd
    def set_ptd(self, ptd):
        self.ptd = ptd
    def validate_RIDType(self, value):
        # Validate type ct:RIDType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 16:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on RIDType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_WTimeType(self, value):
        # Validate type tns:WTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_WTimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_WTimeType_patterns_, ))
    validate_WTimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?)$']]
    def validate_RTTITimeType(self, value):
        # Validate type tns:RTTITimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_RTTITimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_RTTITimeType_patterns_, ))
    validate_RTTITimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9])$']]
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='AssocService', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AssocService')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AssocService':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AssocService')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AssocService', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AssocService'):
        if self.rid is not None and 'rid' not in already_processed:
            already_processed.add('rid')
            outfile.write(' rid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.rid), input_name='rid')), ))
        if self.wta is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            outfile.write(' wta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wta), input_name='wta')), ))
        if self.wtd is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            outfile.write(' wtd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wtd), input_name='wtd')), ))
        if self.wtp is not None and 'wtp' not in already_processed:
            already_processed.add('wtp')
            outfile.write(' wtp=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wtp), input_name='wtp')), ))
        if self.pta is not None and 'pta' not in already_processed:
            already_processed.add('pta')
            outfile.write(' pta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.pta), input_name='pta')), ))
        if self.ptd is not None and 'ptd' not in already_processed:
            already_processed.add('ptd')
            outfile.write(' ptd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ptd), input_name='ptd')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='AssocService', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('rid', node)
        if value is not None and 'rid' not in already_processed:
            already_processed.add('rid')
            self.rid = value
            self.validate_RIDType(self.rid)    # validate type RIDType
        value = find_attr_value_('wta', node)
        if value is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            self.wta = value
            self.validate_WTimeType(self.wta)    # validate type WTimeType
        value = find_attr_value_('wtd', node)
        if value is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            self.wtd = value
            self.validate_WTimeType(self.wtd)    # validate type WTimeType
        value = find_attr_value_('wtp', node)
        if value is not None and 'wtp' not in already_processed:
            already_processed.add('wtp')
            self.wtp = value
            self.validate_WTimeType(self.wtp)    # validate type WTimeType
        value = find_attr_value_('pta', node)
        if value is not None and 'pta' not in already_processed:
            already_processed.add('pta')
            self.pta = value
            self.validate_RTTITimeType(self.pta)    # validate type RTTITimeType
        value = find_attr_value_('ptd', node)
        if value is not None and 'ptd' not in already_processed:
            already_processed.add('ptd')
            self.ptd = value
            self.validate_RTTITimeType(self.ptd)    # validate type RTTITimeType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class AssocService


class Association(GeneratedsSuper):
    """Association -- Type describing an association between schedules
    tiploc -- The TIPLOC of the location where the association occurs.
    category -- Association category
    isCancelled -- True if this association is cancelled, i.e. the association exists but will no longer happen.
    isDeleted -- True if this association is deleted, i.e. the association no longer exists.
    main -- The through, previous working or link-to service
    assoc -- The starting, terminating, subsequent working or link-from service
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, tiploc=None, category=None, isCancelled=False, isDeleted=False, main=None, assoc=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.tiploc = _cast(None, tiploc)
        self.tiploc_nsprefix_ = None
        self.category = _cast(None, category)
        self.category_nsprefix_ = None
        self.isCancelled = _cast(bool, isCancelled)
        self.isCancelled_nsprefix_ = None
        self.isDeleted = _cast(bool, isDeleted)
        self.isDeleted_nsprefix_ = None
        self.main = main
        self.main_nsprefix_ = None
        self.assoc = assoc
        self.assoc_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Association)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Association.subclass:
            return Association.subclass(*args_, **kwargs_)
        else:
            return Association(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_main(self):
        return self.main
    def set_main(self, main):
        self.main = main
    def get_assoc(self):
        return self.assoc
    def set_assoc(self, assoc):
        self.assoc = assoc
    def get_tiploc(self):
        return self.tiploc
    def set_tiploc(self, tiploc):
        self.tiploc = tiploc
    def get_category(self):
        return self.category
    def set_category(self, category):
        self.category = category
    def get_isCancelled(self):
        return self.isCancelled
    def set_isCancelled(self, isCancelled):
        self.isCancelled = isCancelled
    def get_isDeleted(self):
        return self.isDeleted
    def set_isDeleted(self, isDeleted):
        self.isDeleted = isDeleted
    def validate_TiplocType(self, value):
        # Validate type ct:TiplocType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_CategoryType(self, value):
        # Validate type tns:CategoryType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['JJ', 'VV', 'LK', 'NP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CategoryType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.main is not None or
            self.assoc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='Association', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Association')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Association':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Association')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Association', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Association'):
        if self.tiploc is not None and 'tiploc' not in already_processed:
            already_processed.add('tiploc')
            outfile.write(' tiploc=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.tiploc), input_name='tiploc')), ))
        if self.category is not None and 'category' not in already_processed:
            already_processed.add('category')
            outfile.write(' category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.category), input_name='category')), ))
        if self.isCancelled and 'isCancelled' not in already_processed:
            already_processed.add('isCancelled')
            outfile.write(' isCancelled="%s"' % self.gds_format_boolean(self.isCancelled, input_name='isCancelled'))
        if self.isDeleted and 'isDeleted' not in already_processed:
            already_processed.add('isDeleted')
            outfile.write(' isDeleted="%s"' % self.gds_format_boolean(self.isDeleted, input_name='isDeleted'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='Association', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.main is not None:
            namespaceprefix_ = self.main_nsprefix_ + ':' if (UseCapturedNS_ and self.main_nsprefix_) else ''
            self.main.export(outfile, level, namespaceprefix_, namespacedef_='', name_='main', pretty_print=pretty_print)
        if self.assoc is not None:
            namespaceprefix_ = self.assoc_nsprefix_ + ':' if (UseCapturedNS_ and self.assoc_nsprefix_) else ''
            self.assoc.export(outfile, level, namespaceprefix_, namespacedef_='', name_='assoc', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('tiploc', node)
        if value is not None and 'tiploc' not in already_processed:
            already_processed.add('tiploc')
            self.tiploc = value
            self.validate_TiplocType(self.tiploc)    # validate type TiplocType
        value = find_attr_value_('category', node)
        if value is not None and 'category' not in already_processed:
            already_processed.add('category')
            self.category = value
            self.validate_CategoryType(self.category)    # validate type CategoryType
        value = find_attr_value_('isCancelled', node)
        if value is not None and 'isCancelled' not in already_processed:
            already_processed.add('isCancelled')
            if value in ('true', '1'):
                self.isCancelled = True
            elif value in ('false', '0'):
                self.isCancelled = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('isDeleted', node)
        if value is not None and 'isDeleted' not in already_processed:
            already_processed.add('isDeleted')
            if value in ('true', '1'):
                self.isDeleted = True
            elif value in ('false', '0'):
                self.isDeleted = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'main':
            obj_ = AssocService.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.main = obj_
            obj_.original_tagname_ = 'main'
        elif nodeName_ == 'assoc':
            obj_ = AssocService.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.assoc = obj_
            obj_.original_tagname_ = 'assoc'
# end class Association


class OR(GeneratedsSuper):
    """Defines a Passenger Origin Calling Point
    OR -- Defines a Passenger Origin Calling Point
    wta -- Working Scheduled Time of Arrival
    wtd -- Working Scheduled Time of Departure
    fd -- TIPLOC of False Destination to be used at this location
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, wta=None, wtd=None, fd=None, tpl=None, act='  ', planAct=None, can=False, plat=None, pta=None, ptd=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.wta = _cast(None, wta)
        self.wta_nsprefix_ = None
        self.wtd = _cast(None, wtd)
        self.wtd_nsprefix_ = None
        self.fd = _cast(None, fd)
        self.fd_nsprefix_ = None
        self.tpl = _cast(None, tpl)
        self.tpl_nsprefix_ = None
        self.act = _cast(None, act)
        self.act_nsprefix_ = None
        self.planAct = _cast(None, planAct)
        self.planAct_nsprefix_ = None
        self.can = _cast(bool, can)
        self.can_nsprefix_ = None
        self.plat = _cast(None, plat)
        self.plat_nsprefix_ = None
        self.pta = _cast(None, pta)
        self.pta_nsprefix_ = None
        self.ptd = _cast(None, ptd)
        self.ptd_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OR)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OR.subclass:
            return OR.subclass(*args_, **kwargs_)
        else:
            return OR(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_wta(self):
        return self.wta
    def set_wta(self, wta):
        self.wta = wta
    def get_wtd(self):
        return self.wtd
    def set_wtd(self, wtd):
        self.wtd = wtd
    def get_fd(self):
        return self.fd
    def set_fd(self, fd):
        self.fd = fd
    def get_tpl(self):
        return self.tpl
    def set_tpl(self, tpl):
        self.tpl = tpl
    def get_act(self):
        return self.act
    def set_act(self, act):
        self.act = act
    def get_planAct(self):
        return self.planAct
    def set_planAct(self, planAct):
        self.planAct = planAct
    def get_can(self):
        return self.can
    def set_can(self, can):
        self.can = can
    def get_plat(self):
        return self.plat
    def set_plat(self, plat):
        self.plat = plat
    def get_pta(self):
        return self.pta
    def set_pta(self, pta):
        self.pta = pta
    def get_ptd(self):
        return self.ptd
    def set_ptd(self, ptd):
        self.ptd = ptd
    def validate_WTimeType(self, value):
        # Validate type ct:WTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_WTimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_WTimeType_patterns_, ))
    validate_WTimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?)$']]
    def validate_TiplocType(self, value):
        # Validate type ct:TiplocType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_ActivityType(self, value):
        # Validate type ct:ActivityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_ActivityType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ActivityType_patterns_, ))
    validate_ActivityType_patterns_ = [['^(([A-Z0-9\\- ][A-Z0-9\\- ]){1,6})$']]
    def validate_PlatformType(self, value):
        # Validate type ct:PlatformType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_RTTITimeType(self, value):
        # Validate type ct:RTTITimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_RTTITimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_RTTITimeType_patterns_, ))
    validate_RTTITimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9])$']]
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='OR', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OR')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OR':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OR')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OR', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OR'):
        if self.wta is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            outfile.write(' wta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wta), input_name='wta')), ))
        if self.wtd is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            outfile.write(' wtd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wtd), input_name='wtd')), ))
        if self.fd is not None and 'fd' not in already_processed:
            already_processed.add('fd')
            outfile.write(' fd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.fd), input_name='fd')), ))
        if self.tpl is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            outfile.write(' tpl=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.tpl), input_name='tpl')), ))
        if self.act != "  " and 'act' not in already_processed:
            already_processed.add('act')
            outfile.write(' act=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.act), input_name='act')), ))
        if self.planAct is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            outfile.write(' planAct=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.planAct), input_name='planAct')), ))
        if self.can and 'can' not in already_processed:
            already_processed.add('can')
            outfile.write(' can="%s"' % self.gds_format_boolean(self.can, input_name='can'))
        if self.plat is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            outfile.write(' plat=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.plat), input_name='plat')), ))
        if self.pta is not None and 'pta' not in already_processed:
            already_processed.add('pta')
            outfile.write(' pta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.pta), input_name='pta')), ))
        if self.ptd is not None and 'ptd' not in already_processed:
            already_processed.add('ptd')
            outfile.write(' ptd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ptd), input_name='ptd')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='OR', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('wta', node)
        if value is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            self.wta = value
            self.validate_WTimeType(self.wta)    # validate type WTimeType
        value = find_attr_value_('wtd', node)
        if value is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            self.wtd = value
            self.validate_WTimeType(self.wtd)    # validate type WTimeType
        value = find_attr_value_('fd', node)
        if value is not None and 'fd' not in already_processed:
            already_processed.add('fd')
            self.fd = value
            self.validate_TiplocType(self.fd)    # validate type TiplocType
        value = find_attr_value_('tpl', node)
        if value is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            self.tpl = value
            self.validate_TiplocType(self.tpl)    # validate type TiplocType
        value = find_attr_value_('act', node)
        if value is not None and 'act' not in already_processed:
            already_processed.add('act')
            self.act = value
            self.validate_ActivityType(self.act)    # validate type ActivityType
        value = find_attr_value_('planAct', node)
        if value is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            self.planAct = value
            self.validate_ActivityType(self.planAct)    # validate type ActivityType
        value = find_attr_value_('can', node)
        if value is not None and 'can' not in already_processed:
            already_processed.add('can')
            if value in ('true', '1'):
                self.can = True
            elif value in ('false', '0'):
                self.can = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('plat', node)
        if value is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            self.plat = value
            self.validate_PlatformType(self.plat)    # validate type PlatformType
        value = find_attr_value_('pta', node)
        if value is not None and 'pta' not in already_processed:
            already_processed.add('pta')
            self.pta = value
            self.validate_RTTITimeType(self.pta)    # validate type RTTITimeType
        value = find_attr_value_('ptd', node)
        if value is not None and 'ptd' not in already_processed:
            already_processed.add('ptd')
            self.ptd = value
            self.validate_RTTITimeType(self.ptd)    # validate type RTTITimeType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class OR


class OPOR(GeneratedsSuper):
    """OPOR -- Defines an Operational Origin Calling Point
    wta -- Working Scheduled Time of Arrival
    wtd -- Working Scheduled Time of Departure
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, wta=None, wtd=None, tpl=None, act='  ', planAct=None, can=False, plat=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.wta = _cast(None, wta)
        self.wta_nsprefix_ = None
        self.wtd = _cast(None, wtd)
        self.wtd_nsprefix_ = None
        self.tpl = _cast(None, tpl)
        self.tpl_nsprefix_ = None
        self.act = _cast(None, act)
        self.act_nsprefix_ = None
        self.planAct = _cast(None, planAct)
        self.planAct_nsprefix_ = None
        self.can = _cast(bool, can)
        self.can_nsprefix_ = None
        self.plat = _cast(None, plat)
        self.plat_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPOR)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPOR.subclass:
            return OPOR.subclass(*args_, **kwargs_)
        else:
            return OPOR(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_wta(self):
        return self.wta
    def set_wta(self, wta):
        self.wta = wta
    def get_wtd(self):
        return self.wtd
    def set_wtd(self, wtd):
        self.wtd = wtd
    def get_tpl(self):
        return self.tpl
    def set_tpl(self, tpl):
        self.tpl = tpl
    def get_act(self):
        return self.act
    def set_act(self, act):
        self.act = act
    def get_planAct(self):
        return self.planAct
    def set_planAct(self, planAct):
        self.planAct = planAct
    def get_can(self):
        return self.can
    def set_can(self, can):
        self.can = can
    def get_plat(self):
        return self.plat
    def set_plat(self, plat):
        self.plat = plat
    def validate_WTimeType(self, value):
        # Validate type ct:WTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_WTimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_WTimeType_patterns_, ))
    validate_WTimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?)$']]
    def validate_TiplocType(self, value):
        # Validate type ct:TiplocType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_ActivityType(self, value):
        # Validate type ct:ActivityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_ActivityType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ActivityType_patterns_, ))
    validate_ActivityType_patterns_ = [['^(([A-Z0-9\\- ][A-Z0-9\\- ]){1,6})$']]
    def validate_PlatformType(self, value):
        # Validate type ct:PlatformType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='OPOR', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPOR')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OPOR':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OPOR')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OPOR', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OPOR'):
        if self.wta is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            outfile.write(' wta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wta), input_name='wta')), ))
        if self.wtd is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            outfile.write(' wtd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wtd), input_name='wtd')), ))
        if self.tpl is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            outfile.write(' tpl=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.tpl), input_name='tpl')), ))
        if self.act != "  " and 'act' not in already_processed:
            already_processed.add('act')
            outfile.write(' act=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.act), input_name='act')), ))
        if self.planAct is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            outfile.write(' planAct=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.planAct), input_name='planAct')), ))
        if self.can and 'can' not in already_processed:
            already_processed.add('can')
            outfile.write(' can="%s"' % self.gds_format_boolean(self.can, input_name='can'))
        if self.plat is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            outfile.write(' plat=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.plat), input_name='plat')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='OPOR', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('wta', node)
        if value is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            self.wta = value
            self.validate_WTimeType(self.wta)    # validate type WTimeType
        value = find_attr_value_('wtd', node)
        if value is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            self.wtd = value
            self.validate_WTimeType(self.wtd)    # validate type WTimeType
        value = find_attr_value_('tpl', node)
        if value is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            self.tpl = value
            self.validate_TiplocType(self.tpl)    # validate type TiplocType
        value = find_attr_value_('act', node)
        if value is not None and 'act' not in already_processed:
            already_processed.add('act')
            self.act = value
            self.validate_ActivityType(self.act)    # validate type ActivityType
        value = find_attr_value_('planAct', node)
        if value is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            self.planAct = value
            self.validate_ActivityType(self.planAct)    # validate type ActivityType
        value = find_attr_value_('can', node)
        if value is not None and 'can' not in already_processed:
            already_processed.add('can')
            if value in ('true', '1'):
                self.can = True
            elif value in ('false', '0'):
                self.can = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('plat', node)
        if value is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            self.plat = value
            self.validate_PlatformType(self.plat)    # validate type PlatformType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class OPOR


class IP(GeneratedsSuper):
    """IP -- Defines aPassenger Intermediate Calling Point
    wta -- Working Scheduled Time of Arrival
    wtd -- Working Scheduled Time of Departure
    rdelay -- A delay value that is implied by a change to the service's route.
    fd -- TIPLOC of False Destination to be used at this location
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, wta=None, wtd=None, rdelay='0', fd=None, tpl=None, act='  ', planAct=None, can=False, plat=None, pta=None, ptd=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.wta = _cast(None, wta)
        self.wta_nsprefix_ = None
        self.wtd = _cast(None, wtd)
        self.wtd_nsprefix_ = None
        self.rdelay = _cast(int, rdelay)
        self.rdelay_nsprefix_ = None
        self.fd = _cast(None, fd)
        self.fd_nsprefix_ = None
        self.tpl = _cast(None, tpl)
        self.tpl_nsprefix_ = None
        self.act = _cast(None, act)
        self.act_nsprefix_ = None
        self.planAct = _cast(None, planAct)
        self.planAct_nsprefix_ = None
        self.can = _cast(bool, can)
        self.can_nsprefix_ = None
        self.plat = _cast(None, plat)
        self.plat_nsprefix_ = None
        self.pta = _cast(None, pta)
        self.pta_nsprefix_ = None
        self.ptd = _cast(None, ptd)
        self.ptd_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IP)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IP.subclass:
            return IP.subclass(*args_, **kwargs_)
        else:
            return IP(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_wta(self):
        return self.wta
    def set_wta(self, wta):
        self.wta = wta
    def get_wtd(self):
        return self.wtd
    def set_wtd(self, wtd):
        self.wtd = wtd
    def get_rdelay(self):
        return self.rdelay
    def set_rdelay(self, rdelay):
        self.rdelay = rdelay
    def get_fd(self):
        return self.fd
    def set_fd(self, fd):
        self.fd = fd
    def get_tpl(self):
        return self.tpl
    def set_tpl(self, tpl):
        self.tpl = tpl
    def get_act(self):
        return self.act
    def set_act(self, act):
        self.act = act
    def get_planAct(self):
        return self.planAct
    def set_planAct(self, planAct):
        self.planAct = planAct
    def get_can(self):
        return self.can
    def set_can(self, can):
        self.can = can
    def get_plat(self):
        return self.plat
    def set_plat(self, plat):
        self.plat = plat
    def get_pta(self):
        return self.pta
    def set_pta(self, pta):
        self.pta = pta
    def get_ptd(self):
        return self.ptd
    def set_ptd(self, ptd):
        self.ptd = ptd
    def validate_WTimeType(self, value):
        # Validate type ct:WTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_WTimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_WTimeType_patterns_, ))
    validate_WTimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?)$']]
    def validate_DelayValueType(self, value):
        # Validate type ct:DelayValueType, a restriction on xs:short.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            pass
    def validate_TiplocType(self, value):
        # Validate type ct:TiplocType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_ActivityType(self, value):
        # Validate type ct:ActivityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_ActivityType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ActivityType_patterns_, ))
    validate_ActivityType_patterns_ = [['^(([A-Z0-9\\- ][A-Z0-9\\- ]){1,6})$']]
    def validate_PlatformType(self, value):
        # Validate type ct:PlatformType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_RTTITimeType(self, value):
        # Validate type ct:RTTITimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_RTTITimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_RTTITimeType_patterns_, ))
    validate_RTTITimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9])$']]
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='IP', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IP')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IP':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IP')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IP', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IP'):
        if self.wta is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            outfile.write(' wta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wta), input_name='wta')), ))
        if self.wtd is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            outfile.write(' wtd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wtd), input_name='wtd')), ))
        if self.rdelay != 0 and 'rdelay' not in already_processed:
            already_processed.add('rdelay')
            outfile.write(' rdelay="%s"' % self.gds_format_integer(self.rdelay, input_name='rdelay'))
        if self.fd is not None and 'fd' not in already_processed:
            already_processed.add('fd')
            outfile.write(' fd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.fd), input_name='fd')), ))
        if self.tpl is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            outfile.write(' tpl=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.tpl), input_name='tpl')), ))
        if self.act != "  " and 'act' not in already_processed:
            already_processed.add('act')
            outfile.write(' act=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.act), input_name='act')), ))
        if self.planAct is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            outfile.write(' planAct=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.planAct), input_name='planAct')), ))
        if self.can and 'can' not in already_processed:
            already_processed.add('can')
            outfile.write(' can="%s"' % self.gds_format_boolean(self.can, input_name='can'))
        if self.plat is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            outfile.write(' plat=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.plat), input_name='plat')), ))
        if self.pta is not None and 'pta' not in already_processed:
            already_processed.add('pta')
            outfile.write(' pta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.pta), input_name='pta')), ))
        if self.ptd is not None and 'ptd' not in already_processed:
            already_processed.add('ptd')
            outfile.write(' ptd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ptd), input_name='ptd')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='IP', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('wta', node)
        if value is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            self.wta = value
            self.validate_WTimeType(self.wta)    # validate type WTimeType
        value = find_attr_value_('wtd', node)
        if value is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            self.wtd = value
            self.validate_WTimeType(self.wtd)    # validate type WTimeType
        value = find_attr_value_('rdelay', node)
        if value is not None and 'rdelay' not in already_processed:
            already_processed.add('rdelay')
            self.rdelay = self.gds_parse_integer(value, node, 'rdelay')
            self.validate_DelayValueType(self.rdelay)    # validate type DelayValueType
        value = find_attr_value_('fd', node)
        if value is not None and 'fd' not in already_processed:
            already_processed.add('fd')
            self.fd = value
            self.validate_TiplocType(self.fd)    # validate type TiplocType
        value = find_attr_value_('tpl', node)
        if value is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            self.tpl = value
            self.validate_TiplocType(self.tpl)    # validate type TiplocType
        value = find_attr_value_('act', node)
        if value is not None and 'act' not in already_processed:
            already_processed.add('act')
            self.act = value
            self.validate_ActivityType(self.act)    # validate type ActivityType
        value = find_attr_value_('planAct', node)
        if value is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            self.planAct = value
            self.validate_ActivityType(self.planAct)    # validate type ActivityType
        value = find_attr_value_('can', node)
        if value is not None and 'can' not in already_processed:
            already_processed.add('can')
            if value in ('true', '1'):
                self.can = True
            elif value in ('false', '0'):
                self.can = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('plat', node)
        if value is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            self.plat = value
            self.validate_PlatformType(self.plat)    # validate type PlatformType
        value = find_attr_value_('pta', node)
        if value is not None and 'pta' not in already_processed:
            already_processed.add('pta')
            self.pta = value
            self.validate_RTTITimeType(self.pta)    # validate type RTTITimeType
        value = find_attr_value_('ptd', node)
        if value is not None and 'ptd' not in already_processed:
            already_processed.add('ptd')
            self.ptd = value
            self.validate_RTTITimeType(self.ptd)    # validate type RTTITimeType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class IP


class OPIP(GeneratedsSuper):
    """OPIP -- Defines an Operational Intermediate Calling Point
    wta -- Working Scheduled Time of Arrival
    wtd -- Working Scheduled Time of Departure
    rdelay -- A delay value that is implied by a change to the service's route.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, wta=None, wtd=None, rdelay='0', tpl=None, act='  ', planAct=None, can=False, plat=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.wta = _cast(None, wta)
        self.wta_nsprefix_ = None
        self.wtd = _cast(None, wtd)
        self.wtd_nsprefix_ = None
        self.rdelay = _cast(int, rdelay)
        self.rdelay_nsprefix_ = None
        self.tpl = _cast(None, tpl)
        self.tpl_nsprefix_ = None
        self.act = _cast(None, act)
        self.act_nsprefix_ = None
        self.planAct = _cast(None, planAct)
        self.planAct_nsprefix_ = None
        self.can = _cast(bool, can)
        self.can_nsprefix_ = None
        self.plat = _cast(None, plat)
        self.plat_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPIP)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPIP.subclass:
            return OPIP.subclass(*args_, **kwargs_)
        else:
            return OPIP(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_wta(self):
        return self.wta
    def set_wta(self, wta):
        self.wta = wta
    def get_wtd(self):
        return self.wtd
    def set_wtd(self, wtd):
        self.wtd = wtd
    def get_rdelay(self):
        return self.rdelay
    def set_rdelay(self, rdelay):
        self.rdelay = rdelay
    def get_tpl(self):
        return self.tpl
    def set_tpl(self, tpl):
        self.tpl = tpl
    def get_act(self):
        return self.act
    def set_act(self, act):
        self.act = act
    def get_planAct(self):
        return self.planAct
    def set_planAct(self, planAct):
        self.planAct = planAct
    def get_can(self):
        return self.can
    def set_can(self, can):
        self.can = can
    def get_plat(self):
        return self.plat
    def set_plat(self, plat):
        self.plat = plat
    def validate_WTimeType(self, value):
        # Validate type ct:WTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_WTimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_WTimeType_patterns_, ))
    validate_WTimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?)$']]
    def validate_DelayValueType(self, value):
        # Validate type ct:DelayValueType, a restriction on xs:short.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            pass
    def validate_TiplocType(self, value):
        # Validate type ct:TiplocType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_ActivityType(self, value):
        # Validate type ct:ActivityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_ActivityType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ActivityType_patterns_, ))
    validate_ActivityType_patterns_ = [['^(([A-Z0-9\\- ][A-Z0-9\\- ]){1,6})$']]
    def validate_PlatformType(self, value):
        # Validate type ct:PlatformType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='OPIP', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPIP')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OPIP':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OPIP')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OPIP', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OPIP'):
        if self.wta is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            outfile.write(' wta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wta), input_name='wta')), ))
        if self.wtd is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            outfile.write(' wtd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wtd), input_name='wtd')), ))
        if self.rdelay != 0 and 'rdelay' not in already_processed:
            already_processed.add('rdelay')
            outfile.write(' rdelay="%s"' % self.gds_format_integer(self.rdelay, input_name='rdelay'))
        if self.tpl is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            outfile.write(' tpl=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.tpl), input_name='tpl')), ))
        if self.act != "  " and 'act' not in already_processed:
            already_processed.add('act')
            outfile.write(' act=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.act), input_name='act')), ))
        if self.planAct is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            outfile.write(' planAct=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.planAct), input_name='planAct')), ))
        if self.can and 'can' not in already_processed:
            already_processed.add('can')
            outfile.write(' can="%s"' % self.gds_format_boolean(self.can, input_name='can'))
        if self.plat is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            outfile.write(' plat=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.plat), input_name='plat')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='OPIP', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('wta', node)
        if value is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            self.wta = value
            self.validate_WTimeType(self.wta)    # validate type WTimeType
        value = find_attr_value_('wtd', node)
        if value is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            self.wtd = value
            self.validate_WTimeType(self.wtd)    # validate type WTimeType
        value = find_attr_value_('rdelay', node)
        if value is not None and 'rdelay' not in already_processed:
            already_processed.add('rdelay')
            self.rdelay = self.gds_parse_integer(value, node, 'rdelay')
            self.validate_DelayValueType(self.rdelay)    # validate type DelayValueType
        value = find_attr_value_('tpl', node)
        if value is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            self.tpl = value
            self.validate_TiplocType(self.tpl)    # validate type TiplocType
        value = find_attr_value_('act', node)
        if value is not None and 'act' not in already_processed:
            already_processed.add('act')
            self.act = value
            self.validate_ActivityType(self.act)    # validate type ActivityType
        value = find_attr_value_('planAct', node)
        if value is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            self.planAct = value
            self.validate_ActivityType(self.planAct)    # validate type ActivityType
        value = find_attr_value_('can', node)
        if value is not None and 'can' not in already_processed:
            already_processed.add('can')
            if value in ('true', '1'):
                self.can = True
            elif value in ('false', '0'):
                self.can = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('plat', node)
        if value is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            self.plat = value
            self.validate_PlatformType(self.plat)    # validate type PlatformType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class OPIP


class PP(GeneratedsSuper):
    """PP -- Defines an Intermediate Passing Point
    wtp -- Working Scheduled Time of Passing
    rdelay -- A delay value that is implied by a change to the service's route.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, wtp=None, rdelay='0', tpl=None, act='  ', planAct=None, can=False, plat=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.wtp = _cast(None, wtp)
        self.wtp_nsprefix_ = None
        self.rdelay = _cast(int, rdelay)
        self.rdelay_nsprefix_ = None
        self.tpl = _cast(None, tpl)
        self.tpl_nsprefix_ = None
        self.act = _cast(None, act)
        self.act_nsprefix_ = None
        self.planAct = _cast(None, planAct)
        self.planAct_nsprefix_ = None
        self.can = _cast(bool, can)
        self.can_nsprefix_ = None
        self.plat = _cast(None, plat)
        self.plat_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PP)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PP.subclass:
            return PP.subclass(*args_, **kwargs_)
        else:
            return PP(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_wtp(self):
        return self.wtp
    def set_wtp(self, wtp):
        self.wtp = wtp
    def get_rdelay(self):
        return self.rdelay
    def set_rdelay(self, rdelay):
        self.rdelay = rdelay
    def get_tpl(self):
        return self.tpl
    def set_tpl(self, tpl):
        self.tpl = tpl
    def get_act(self):
        return self.act
    def set_act(self, act):
        self.act = act
    def get_planAct(self):
        return self.planAct
    def set_planAct(self, planAct):
        self.planAct = planAct
    def get_can(self):
        return self.can
    def set_can(self, can):
        self.can = can
    def get_plat(self):
        return self.plat
    def set_plat(self, plat):
        self.plat = plat
    def validate_WTimeType(self, value):
        # Validate type ct:WTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_WTimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_WTimeType_patterns_, ))
    validate_WTimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?)$']]
    def validate_DelayValueType(self, value):
        # Validate type ct:DelayValueType, a restriction on xs:short.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            pass
    def validate_TiplocType(self, value):
        # Validate type ct:TiplocType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_ActivityType(self, value):
        # Validate type ct:ActivityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_ActivityType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ActivityType_patterns_, ))
    validate_ActivityType_patterns_ = [['^(([A-Z0-9\\- ][A-Z0-9\\- ]){1,6})$']]
    def validate_PlatformType(self, value):
        # Validate type ct:PlatformType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='PP', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PP')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PP':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PP')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PP', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PP'):
        if self.wtp is not None and 'wtp' not in already_processed:
            already_processed.add('wtp')
            outfile.write(' wtp=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wtp), input_name='wtp')), ))
        if self.rdelay != 0 and 'rdelay' not in already_processed:
            already_processed.add('rdelay')
            outfile.write(' rdelay="%s"' % self.gds_format_integer(self.rdelay, input_name='rdelay'))
        if self.tpl is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            outfile.write(' tpl=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.tpl), input_name='tpl')), ))
        if self.act != "  " and 'act' not in already_processed:
            already_processed.add('act')
            outfile.write(' act=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.act), input_name='act')), ))
        if self.planAct is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            outfile.write(' planAct=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.planAct), input_name='planAct')), ))
        if self.can and 'can' not in already_processed:
            already_processed.add('can')
            outfile.write(' can="%s"' % self.gds_format_boolean(self.can, input_name='can'))
        if self.plat is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            outfile.write(' plat=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.plat), input_name='plat')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='PP', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('wtp', node)
        if value is not None and 'wtp' not in already_processed:
            already_processed.add('wtp')
            self.wtp = value
            self.validate_WTimeType(self.wtp)    # validate type WTimeType
        value = find_attr_value_('rdelay', node)
        if value is not None and 'rdelay' not in already_processed:
            already_processed.add('rdelay')
            self.rdelay = self.gds_parse_integer(value, node, 'rdelay')
            self.validate_DelayValueType(self.rdelay)    # validate type DelayValueType
        value = find_attr_value_('tpl', node)
        if value is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            self.tpl = value
            self.validate_TiplocType(self.tpl)    # validate type TiplocType
        value = find_attr_value_('act', node)
        if value is not None and 'act' not in already_processed:
            already_processed.add('act')
            self.act = value
            self.validate_ActivityType(self.act)    # validate type ActivityType
        value = find_attr_value_('planAct', node)
        if value is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            self.planAct = value
            self.validate_ActivityType(self.planAct)    # validate type ActivityType
        value = find_attr_value_('can', node)
        if value is not None and 'can' not in already_processed:
            already_processed.add('can')
            if value in ('true', '1'):
                self.can = True
            elif value in ('false', '0'):
                self.can = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('plat', node)
        if value is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            self.plat = value
            self.validate_PlatformType(self.plat)    # validate type PlatformType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class PP


class DT(GeneratedsSuper):
    """DT -- Defines a Passenger Destination Calling point
    wta -- Working Scheduled Time of Arrival
    wtd -- Working Scheduled Time of Departure
    rdelay -- A delay value that is implied by a change to the service's route.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, wta=None, wtd=None, rdelay='0', tpl=None, act='  ', planAct=None, can=False, plat=None, pta=None, ptd=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.wta = _cast(None, wta)
        self.wta_nsprefix_ = None
        self.wtd = _cast(None, wtd)
        self.wtd_nsprefix_ = None
        self.rdelay = _cast(int, rdelay)
        self.rdelay_nsprefix_ = None
        self.tpl = _cast(None, tpl)
        self.tpl_nsprefix_ = None
        self.act = _cast(None, act)
        self.act_nsprefix_ = None
        self.planAct = _cast(None, planAct)
        self.planAct_nsprefix_ = None
        self.can = _cast(bool, can)
        self.can_nsprefix_ = None
        self.plat = _cast(None, plat)
        self.plat_nsprefix_ = None
        self.pta = _cast(None, pta)
        self.pta_nsprefix_ = None
        self.ptd = _cast(None, ptd)
        self.ptd_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DT.subclass:
            return DT.subclass(*args_, **kwargs_)
        else:
            return DT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_wta(self):
        return self.wta
    def set_wta(self, wta):
        self.wta = wta
    def get_wtd(self):
        return self.wtd
    def set_wtd(self, wtd):
        self.wtd = wtd
    def get_rdelay(self):
        return self.rdelay
    def set_rdelay(self, rdelay):
        self.rdelay = rdelay
    def get_tpl(self):
        return self.tpl
    def set_tpl(self, tpl):
        self.tpl = tpl
    def get_act(self):
        return self.act
    def set_act(self, act):
        self.act = act
    def get_planAct(self):
        return self.planAct
    def set_planAct(self, planAct):
        self.planAct = planAct
    def get_can(self):
        return self.can
    def set_can(self, can):
        self.can = can
    def get_plat(self):
        return self.plat
    def set_plat(self, plat):
        self.plat = plat
    def get_pta(self):
        return self.pta
    def set_pta(self, pta):
        self.pta = pta
    def get_ptd(self):
        return self.ptd
    def set_ptd(self, ptd):
        self.ptd = ptd
    def validate_WTimeType(self, value):
        # Validate type ct:WTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_WTimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_WTimeType_patterns_, ))
    validate_WTimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?)$']]
    def validate_DelayValueType(self, value):
        # Validate type ct:DelayValueType, a restriction on xs:short.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            pass
    def validate_TiplocType(self, value):
        # Validate type ct:TiplocType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_ActivityType(self, value):
        # Validate type ct:ActivityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_ActivityType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ActivityType_patterns_, ))
    validate_ActivityType_patterns_ = [['^(([A-Z0-9\\- ][A-Z0-9\\- ]){1,6})$']]
    def validate_PlatformType(self, value):
        # Validate type ct:PlatformType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_RTTITimeType(self, value):
        # Validate type ct:RTTITimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_RTTITimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_RTTITimeType_patterns_, ))
    validate_RTTITimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9])$']]
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='DT', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DT')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DT':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DT')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DT', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DT'):
        if self.wta is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            outfile.write(' wta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wta), input_name='wta')), ))
        if self.wtd is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            outfile.write(' wtd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wtd), input_name='wtd')), ))
        if self.rdelay != 0 and 'rdelay' not in already_processed:
            already_processed.add('rdelay')
            outfile.write(' rdelay="%s"' % self.gds_format_integer(self.rdelay, input_name='rdelay'))
        if self.tpl is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            outfile.write(' tpl=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.tpl), input_name='tpl')), ))
        if self.act != "  " and 'act' not in already_processed:
            already_processed.add('act')
            outfile.write(' act=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.act), input_name='act')), ))
        if self.planAct is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            outfile.write(' planAct=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.planAct), input_name='planAct')), ))
        if self.can and 'can' not in already_processed:
            already_processed.add('can')
            outfile.write(' can="%s"' % self.gds_format_boolean(self.can, input_name='can'))
        if self.plat is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            outfile.write(' plat=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.plat), input_name='plat')), ))
        if self.pta is not None and 'pta' not in already_processed:
            already_processed.add('pta')
            outfile.write(' pta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.pta), input_name='pta')), ))
        if self.ptd is not None and 'ptd' not in already_processed:
            already_processed.add('ptd')
            outfile.write(' ptd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ptd), input_name='ptd')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='DT', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('wta', node)
        if value is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            self.wta = value
            self.validate_WTimeType(self.wta)    # validate type WTimeType
        value = find_attr_value_('wtd', node)
        if value is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            self.wtd = value
            self.validate_WTimeType(self.wtd)    # validate type WTimeType
        value = find_attr_value_('rdelay', node)
        if value is not None and 'rdelay' not in already_processed:
            already_processed.add('rdelay')
            self.rdelay = self.gds_parse_integer(value, node, 'rdelay')
            self.validate_DelayValueType(self.rdelay)    # validate type DelayValueType
        value = find_attr_value_('tpl', node)
        if value is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            self.tpl = value
            self.validate_TiplocType(self.tpl)    # validate type TiplocType
        value = find_attr_value_('act', node)
        if value is not None and 'act' not in already_processed:
            already_processed.add('act')
            self.act = value
            self.validate_ActivityType(self.act)    # validate type ActivityType
        value = find_attr_value_('planAct', node)
        if value is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            self.planAct = value
            self.validate_ActivityType(self.planAct)    # validate type ActivityType
        value = find_attr_value_('can', node)
        if value is not None and 'can' not in already_processed:
            already_processed.add('can')
            if value in ('true', '1'):
                self.can = True
            elif value in ('false', '0'):
                self.can = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('plat', node)
        if value is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            self.plat = value
            self.validate_PlatformType(self.plat)    # validate type PlatformType
        value = find_attr_value_('pta', node)
        if value is not None and 'pta' not in already_processed:
            already_processed.add('pta')
            self.pta = value
            self.validate_RTTITimeType(self.pta)    # validate type RTTITimeType
        value = find_attr_value_('ptd', node)
        if value is not None and 'ptd' not in already_processed:
            already_processed.add('ptd')
            self.ptd = value
            self.validate_RTTITimeType(self.ptd)    # validate type RTTITimeType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class DT


class OPDT(GeneratedsSuper):
    """OPDT -- Defines an Operational Destination Calling point
    wta -- Working Scheduled Time of Arrival
    wtd -- Working Scheduled Time of Departure
    rdelay -- A delay value that is implied by a change to the service's route.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, wta=None, wtd=None, rdelay='0', tpl=None, act='  ', planAct=None, can=False, plat=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.wta = _cast(None, wta)
        self.wta_nsprefix_ = None
        self.wtd = _cast(None, wtd)
        self.wtd_nsprefix_ = None
        self.rdelay = _cast(int, rdelay)
        self.rdelay_nsprefix_ = None
        self.tpl = _cast(None, tpl)
        self.tpl_nsprefix_ = None
        self.act = _cast(None, act)
        self.act_nsprefix_ = None
        self.planAct = _cast(None, planAct)
        self.planAct_nsprefix_ = None
        self.can = _cast(bool, can)
        self.can_nsprefix_ = None
        self.plat = _cast(None, plat)
        self.plat_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OPDT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OPDT.subclass:
            return OPDT.subclass(*args_, **kwargs_)
        else:
            return OPDT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_wta(self):
        return self.wta
    def set_wta(self, wta):
        self.wta = wta
    def get_wtd(self):
        return self.wtd
    def set_wtd(self, wtd):
        self.wtd = wtd
    def get_rdelay(self):
        return self.rdelay
    def set_rdelay(self, rdelay):
        self.rdelay = rdelay
    def get_tpl(self):
        return self.tpl
    def set_tpl(self, tpl):
        self.tpl = tpl
    def get_act(self):
        return self.act
    def set_act(self, act):
        self.act = act
    def get_planAct(self):
        return self.planAct
    def set_planAct(self, planAct):
        self.planAct = planAct
    def get_can(self):
        return self.can
    def set_can(self, can):
        self.can = can
    def get_plat(self):
        return self.plat
    def set_plat(self, plat):
        self.plat = plat
    def validate_WTimeType(self, value):
        # Validate type ct:WTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_WTimeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_WTimeType_patterns_, ))
    validate_WTimeType_patterns_ = [['^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?)$']]
    def validate_DelayValueType(self, value):
        # Validate type ct:DelayValueType, a restriction on xs:short.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            pass
    def validate_TiplocType(self, value):
        # Validate type ct:TiplocType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TiplocType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_ActivityType(self, value):
        # Validate type ct:ActivityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ActivityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_ActivityType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ActivityType_patterns_, ))
    validate_ActivityType_patterns_ = [['^(([A-Z0-9\\- ][A-Z0-9\\- ]){1,6})$']]
    def validate_PlatformType(self, value):
        # Validate type ct:PlatformType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PlatformType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='OPDT', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OPDT')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OPDT':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OPDT')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OPDT', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OPDT'):
        if self.wta is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            outfile.write(' wta=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wta), input_name='wta')), ))
        if self.wtd is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            outfile.write(' wtd=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wtd), input_name='wtd')), ))
        if self.rdelay != 0 and 'rdelay' not in already_processed:
            already_processed.add('rdelay')
            outfile.write(' rdelay="%s"' % self.gds_format_integer(self.rdelay, input_name='rdelay'))
        if self.tpl is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            outfile.write(' tpl=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.tpl), input_name='tpl')), ))
        if self.act != "  " and 'act' not in already_processed:
            already_processed.add('act')
            outfile.write(' act=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.act), input_name='act')), ))
        if self.planAct is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            outfile.write(' planAct=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.planAct), input_name='planAct')), ))
        if self.can and 'can' not in already_processed:
            already_processed.add('can')
            outfile.write(' can="%s"' % self.gds_format_boolean(self.can, input_name='can'))
        if self.plat is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            outfile.write(' plat=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.plat), input_name='plat')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='OPDT', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('wta', node)
        if value is not None and 'wta' not in already_processed:
            already_processed.add('wta')
            self.wta = value
            self.validate_WTimeType(self.wta)    # validate type WTimeType
        value = find_attr_value_('wtd', node)
        if value is not None and 'wtd' not in already_processed:
            already_processed.add('wtd')
            self.wtd = value
            self.validate_WTimeType(self.wtd)    # validate type WTimeType
        value = find_attr_value_('rdelay', node)
        if value is not None and 'rdelay' not in already_processed:
            already_processed.add('rdelay')
            self.rdelay = self.gds_parse_integer(value, node, 'rdelay')
            self.validate_DelayValueType(self.rdelay)    # validate type DelayValueType
        value = find_attr_value_('tpl', node)
        if value is not None and 'tpl' not in already_processed:
            already_processed.add('tpl')
            self.tpl = value
            self.validate_TiplocType(self.tpl)    # validate type TiplocType
        value = find_attr_value_('act', node)
        if value is not None and 'act' not in already_processed:
            already_processed.add('act')
            self.act = value
            self.validate_ActivityType(self.act)    # validate type ActivityType
        value = find_attr_value_('planAct', node)
        if value is not None and 'planAct' not in already_processed:
            already_processed.add('planAct')
            self.planAct = value
            self.validate_ActivityType(self.planAct)    # validate type ActivityType
        value = find_attr_value_('can', node)
        if value is not None and 'can' not in already_processed:
            already_processed.add('can')
            if value in ('true', '1'):
                self.can = True
            elif value in ('false', '0'):
                self.can = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('plat', node)
        if value is not None and 'plat' not in already_processed:
            already_processed.add('plat')
            self.plat = value
            self.validate_PlatformType(self.plat)    # validate type PlatformType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class OPDT


class Schedule(GeneratedsSuper):
    """Schedule -- Train Schedule
    rid -- RTTI unique Train ID
    uid -- Train UID
    trainId -- Train ID (Headcode)
    ssd -- Scheduled Start Date
    toc -- ATOC Code
    status -- Type of service, i.e. Train/Bus/Ship.
    trainCat -- Category of service.
    isPassengerSvc -- True if Darwin classifies the train category as a passenger service.
    deleted -- Service has been deleted and should not be used/displayed.
    isCharter -- Indicates if this service is a charter service.
    qtrain -- True if this is a Q Train (runs as required) that has not yet been activated. Note that a Q Train that has been activated before the XML Timetable file has been built will not have this attribute set true.
    OR -- Origin location
    OPOR -- Operational origin location
    IP -- Intermediate calling location
    OPIP -- Intermediate operational calling location
    PP -- Passing location
    DT -- Destination location
    OPDT -- Operational destination location
    cancelReason -- Reason for cancellation of service/location
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, rid=None, uid=None, trainId=None, ssd=None, toc=None, status='P', trainCat='OO', isPassengerSvc=True, deleted=False, isCharter=False, qtrain=False, can=False, OR=None, OPOR=None, IP=None, OPIP=None, PP=None, DT=None, OPDT=None, cancelReason=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.rid = _cast(None, rid)
        self.rid_nsprefix_ = None
        self.uid = _cast(None, uid)
        self.uid_nsprefix_ = None
        self.trainId = _cast(None, trainId)
        self.trainId_nsprefix_ = None
        self.ssd = _cast(None, ssd)
        self.ssd_nsprefix_ = None
        self.toc = _cast(None, toc)
        self.toc_nsprefix_ = None
        self.status = _cast(None, status)
        self.status_nsprefix_ = None
        self.trainCat = _cast(None, trainCat)
        self.trainCat_nsprefix_ = None
        self.isPassengerSvc = _cast(bool, isPassengerSvc)
        self.isPassengerSvc_nsprefix_ = None
        self.deleted = _cast(bool, deleted)
        self.deleted_nsprefix_ = None
        self.isCharter = _cast(bool, isCharter)
        self.isCharter_nsprefix_ = None
        self.qtrain = _cast(bool, qtrain)
        self.qtrain_nsprefix_ = None
        self.can = _cast(bool, can)
        self.can_nsprefix_ = None
        if OR is None:
            self.OR = []
        else:
            self.OR = OR
        self.OR_nsprefix_ = None
        if OPOR is None:
            self.OPOR = []
        else:
            self.OPOR = OPOR
        self.OPOR_nsprefix_ = None
        if IP is None:
            self.IP = []
        else:
            self.IP = IP
        self.IP_nsprefix_ = None
        if OPIP is None:
            self.OPIP = []
        else:
            self.OPIP = OPIP
        self.OPIP_nsprefix_ = None
        if PP is None:
            self.PP = []
        else:
            self.PP = PP
        self.PP_nsprefix_ = None
        if DT is None:
            self.DT = []
        else:
            self.DT = DT
        self.DT_nsprefix_ = None
        if OPDT is None:
            self.OPDT = []
        else:
            self.OPDT = OPDT
        self.OPDT_nsprefix_ = None
        self.cancelReason = cancelReason
        self.cancelReason_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Schedule)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Schedule.subclass:
            return Schedule.subclass(*args_, **kwargs_)
        else:
            return Schedule(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OR(self):
        return self.OR
    def set_OR(self, OR):
        self.OR = OR
    def add_OR(self, value):
        self.OR.append(value)
    def insert_OR_at(self, index, value):
        self.OR.insert(index, value)
    def replace_OR_at(self, index, value):
        self.OR[index] = value
    def get_OPOR(self):
        return self.OPOR
    def set_OPOR(self, OPOR):
        self.OPOR = OPOR
    def add_OPOR(self, value):
        self.OPOR.append(value)
    def insert_OPOR_at(self, index, value):
        self.OPOR.insert(index, value)
    def replace_OPOR_at(self, index, value):
        self.OPOR[index] = value
    def get_IP(self):
        return self.IP
    def set_IP(self, IP):
        self.IP = IP
    def add_IP(self, value):
        self.IP.append(value)
    def insert_IP_at(self, index, value):
        self.IP.insert(index, value)
    def replace_IP_at(self, index, value):
        self.IP[index] = value
    def get_OPIP(self):
        return self.OPIP
    def set_OPIP(self, OPIP):
        self.OPIP = OPIP
    def add_OPIP(self, value):
        self.OPIP.append(value)
    def insert_OPIP_at(self, index, value):
        self.OPIP.insert(index, value)
    def replace_OPIP_at(self, index, value):
        self.OPIP[index] = value
    def get_PP(self):
        return self.PP
    def set_PP(self, PP):
        self.PP = PP
    def add_PP(self, value):
        self.PP.append(value)
    def insert_PP_at(self, index, value):
        self.PP.insert(index, value)
    def replace_PP_at(self, index, value):
        self.PP[index] = value
    def get_DT(self):
        return self.DT
    def set_DT(self, DT):
        self.DT = DT
    def add_DT(self, value):
        self.DT.append(value)
    def insert_DT_at(self, index, value):
        self.DT.insert(index, value)
    def replace_DT_at(self, index, value):
        self.DT[index] = value
    def get_OPDT(self):
        return self.OPDT
    def set_OPDT(self, OPDT):
        self.OPDT = OPDT
    def add_OPDT(self, value):
        self.OPDT.append(value)
    def insert_OPDT_at(self, index, value):
        self.OPDT.insert(index, value)
    def replace_OPDT_at(self, index, value):
        self.OPDT[index] = value
    def get_cancelReason(self):
        return self.cancelReason
    def set_cancelReason(self, cancelReason):
        self.cancelReason = cancelReason
    def get_rid(self):
        return self.rid
    def set_rid(self, rid):
        self.rid = rid
    def get_uid(self):
        return self.uid
    def set_uid(self, uid):
        self.uid = uid
    def get_trainId(self):
        return self.trainId
    def set_trainId(self, trainId):
        self.trainId = trainId
    def get_ssd(self):
        return self.ssd
    def set_ssd(self, ssd):
        self.ssd = ssd
    def get_toc(self):
        return self.toc
    def set_toc(self, toc):
        self.toc = toc
    def get_status(self):
        return self.status
    def set_status(self, status):
        self.status = status
    def get_trainCat(self):
        return self.trainCat
    def set_trainCat(self, trainCat):
        self.trainCat = trainCat
    def get_isPassengerSvc(self):
        return self.isPassengerSvc
    def set_isPassengerSvc(self, isPassengerSvc):
        self.isPassengerSvc = isPassengerSvc
    def get_deleted(self):
        return self.deleted
    def set_deleted(self, deleted):
        self.deleted = deleted
    def get_isCharter(self):
        return self.isCharter
    def set_isCharter(self, isCharter):
        self.isCharter = isCharter
    def get_qtrain(self):
        return self.qtrain
    def set_qtrain(self, qtrain):
        self.qtrain = qtrain
    def get_can(self):
        return self.can
    def set_can(self, can):
        self.can = can
    def validate_RIDType(self, value):
        # Validate type ct:RIDType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 16:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on RIDType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_UIDType(self, value):
        # Validate type ct:UIDType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on UIDType' % {"value": encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_TrainIdType(self, value):
        # Validate type ct:TrainIdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on TrainIdType' % {"value": encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_TrainIdType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_TrainIdType_patterns_, ))
    validate_TrainIdType_patterns_ = [['^([0-9][A-Z][0-9][0-9])$']]
    def validate_RTTIDateType(self, value):
        # Validate type ct:RTTIDateType, a restriction on xs:date.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
    def validate_TOCType(self, value):
        # Validate type ct:TOCType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on TOCType' % {"value": encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_CIFTrainStatusType(self, value):
        # Validate type ct:CIFTrainStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CIFTrainStatusType' % {"value": encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_CIFTrainStatusType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CIFTrainStatusType_patterns_, ))
    validate_CIFTrainStatusType_patterns_ = [['^([BFPST12345])$']]
    def validate_CIFTrainCategoryType(self, value):
        # Validate type ct:CIFTrainCategoryType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CIFTrainCategoryType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CIFTrainCategoryType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.OR or
            self.OPOR or
            self.IP or
            self.OPIP or
            self.PP or
            self.DT or
            self.OPDT or
            self.cancelReason is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8" xmlns:ct="http://www.thalesgroup.com/rtti/PushPort/CommonTypes/v1" ', name_='Schedule', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Schedule')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Schedule':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Schedule')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Schedule', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Schedule'):
        if self.rid is not None and 'rid' not in already_processed:
            already_processed.add('rid')
            outfile.write(' rid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.rid), input_name='rid')), ))
        if self.uid is not None and 'uid' not in already_processed:
            already_processed.add('uid')
            outfile.write(' uid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.uid), input_name='uid')), ))
        if self.trainId is not None and 'trainId' not in already_processed:
            already_processed.add('trainId')
            outfile.write(' trainId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.trainId), input_name='trainId')), ))
        if self.ssd is not None and 'ssd' not in already_processed:
            already_processed.add('ssd')
            outfile.write(' ssd="%s"' % self.gds_format_date(self.ssd, input_name='ssd'))
        if self.toc is not None and 'toc' not in already_processed:
            already_processed.add('toc')
            outfile.write(' toc=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.toc), input_name='toc')), ))
        if self.status != "P" and 'status' not in already_processed:
            already_processed.add('status')
            outfile.write(' status=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.status), input_name='status')), ))
        if self.trainCat != "OO" and 'trainCat' not in already_processed:
            already_processed.add('trainCat')
            outfile.write(' trainCat=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.trainCat), input_name='trainCat')), ))
        if not self.isPassengerSvc and 'isPassengerSvc' not in already_processed:
            already_processed.add('isPassengerSvc')
            outfile.write(' isPassengerSvc="%s"' % self.gds_format_boolean(self.isPassengerSvc, input_name='isPassengerSvc'))
        if self.deleted and 'deleted' not in already_processed:
            already_processed.add('deleted')
            outfile.write(' deleted="%s"' % self.gds_format_boolean(self.deleted, input_name='deleted'))
        if self.isCharter and 'isCharter' not in already_processed:
            already_processed.add('isCharter')
            outfile.write(' isCharter="%s"' % self.gds_format_boolean(self.isCharter, input_name='isCharter'))
        if self.qtrain and 'qtrain' not in already_processed:
            already_processed.add('qtrain')
            outfile.write(' qtrain="%s"' % self.gds_format_boolean(self.qtrain, input_name='qtrain'))
        if self.can and 'can' not in already_processed:
            already_processed.add('can')
            outfile.write(' can="%s"' % self.gds_format_boolean(self.can, input_name='can'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8" xmlns:ct="http://www.thalesgroup.com/rtti/PushPort/CommonTypes/v1" ', name_='Schedule', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OR_ in self.OR:
            namespaceprefix_ = self.OR_nsprefix_ + ':' if (UseCapturedNS_ and self.OR_nsprefix_) else ''
            OR_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OR', pretty_print=pretty_print)
        for OPOR_ in self.OPOR:
            namespaceprefix_ = self.OPOR_nsprefix_ + ':' if (UseCapturedNS_ and self.OPOR_nsprefix_) else ''
            OPOR_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OPOR', pretty_print=pretty_print)
        for IP_ in self.IP:
            namespaceprefix_ = self.IP_nsprefix_ + ':' if (UseCapturedNS_ and self.IP_nsprefix_) else ''
            IP_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IP', pretty_print=pretty_print)
        for OPIP_ in self.OPIP:
            namespaceprefix_ = self.OPIP_nsprefix_ + ':' if (UseCapturedNS_ and self.OPIP_nsprefix_) else ''
            OPIP_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OPIP', pretty_print=pretty_print)
        for PP_ in self.PP:
            namespaceprefix_ = self.PP_nsprefix_ + ':' if (UseCapturedNS_ and self.PP_nsprefix_) else ''
            PP_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PP', pretty_print=pretty_print)
        for DT_ in self.DT:
            namespaceprefix_ = self.DT_nsprefix_ + ':' if (UseCapturedNS_ and self.DT_nsprefix_) else ''
            DT_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DT', pretty_print=pretty_print)
        for OPDT_ in self.OPDT:
            namespaceprefix_ = self.OPDT_nsprefix_ + ':' if (UseCapturedNS_ and self.OPDT_nsprefix_) else ''
            OPDT_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OPDT', pretty_print=pretty_print)
        if self.cancelReason is not None:
            namespaceprefix_ = self.cancelReason_nsprefix_ + ':' if (UseCapturedNS_ and self.cancelReason_nsprefix_) else ''
            self.cancelReason.export(outfile, level, namespaceprefix_, namespacedef_='', name_='cancelReason', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('rid', node)
        if value is not None and 'rid' not in already_processed:
            already_processed.add('rid')
            self.rid = value
            self.validate_RIDType(self.rid)    # validate type RIDType
        value = find_attr_value_('uid', node)
        if value is not None and 'uid' not in already_processed:
            already_processed.add('uid')
            self.uid = value
            self.validate_UIDType(self.uid)    # validate type UIDType
        value = find_attr_value_('trainId', node)
        if value is not None and 'trainId' not in already_processed:
            already_processed.add('trainId')
            self.trainId = value
            self.validate_TrainIdType(self.trainId)    # validate type TrainIdType
        value = find_attr_value_('ssd', node)
        if value is not None and 'ssd' not in already_processed:
            already_processed.add('ssd')
            try:
                self.ssd = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (ssd): %s' % exp)
            self.validate_RTTIDateType(self.ssd)    # validate type RTTIDateType
        value = find_attr_value_('toc', node)
        if value is not None and 'toc' not in already_processed:
            already_processed.add('toc')
            self.toc = value
            self.validate_TOCType(self.toc)    # validate type TOCType
        value = find_attr_value_('status', node)
        if value is not None and 'status' not in already_processed:
            already_processed.add('status')
            self.status = value
            self.validate_CIFTrainStatusType(self.status)    # validate type CIFTrainStatusType
        value = find_attr_value_('trainCat', node)
        if value is not None and 'trainCat' not in already_processed:
            already_processed.add('trainCat')
            self.trainCat = value
            self.validate_CIFTrainCategoryType(self.trainCat)    # validate type CIFTrainCategoryType
        value = find_attr_value_('isPassengerSvc', node)
        if value is not None and 'isPassengerSvc' not in already_processed:
            already_processed.add('isPassengerSvc')
            if value in ('true', '1'):
                self.isPassengerSvc = True
            elif value in ('false', '0'):
                self.isPassengerSvc = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleted', node)
        if value is not None and 'deleted' not in already_processed:
            already_processed.add('deleted')
            if value in ('true', '1'):
                self.deleted = True
            elif value in ('false', '0'):
                self.deleted = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('isCharter', node)
        if value is not None and 'isCharter' not in already_processed:
            already_processed.add('isCharter')
            if value in ('true', '1'):
                self.isCharter = True
            elif value in ('false', '0'):
                self.isCharter = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('qtrain', node)
        if value is not None and 'qtrain' not in already_processed:
            already_processed.add('qtrain')
            if value in ('true', '1'):
                self.qtrain = True
            elif value in ('false', '0'):
                self.qtrain = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('can', node)
        if value is not None and 'can' not in already_processed:
            already_processed.add('can')
            if value in ('true', '1'):
                self.can = True
            elif value in ('false', '0'):
                self.can = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OR':
            obj_ = OR.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OR.append(obj_)
            obj_.original_tagname_ = 'OR'
        elif nodeName_ == 'OPOR':
            obj_ = OPOR.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OPOR.append(obj_)
            obj_.original_tagname_ = 'OPOR'
        elif nodeName_ == 'IP':
            obj_ = IP.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IP.append(obj_)
            obj_.original_tagname_ = 'IP'
        elif nodeName_ == 'OPIP':
            obj_ = OPIP.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OPIP.append(obj_)
            obj_.original_tagname_ = 'OPIP'
        elif nodeName_ == 'PP':
            obj_ = PP.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PP.append(obj_)
            obj_.original_tagname_ = 'PP'
        elif nodeName_ == 'DT':
            obj_ = DT.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DT.append(obj_)
            obj_.original_tagname_ = 'DT'
        elif nodeName_ == 'OPDT':
            obj_ = OPDT.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OPDT.append(obj_)
            obj_.original_tagname_ = 'OPDT'
        elif nodeName_ == 'cancelReason':
            obj_ = DisruptionReasonType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.cancelReason = obj_
            obj_.original_tagname_ = 'cancelReason'
# end class Schedule


class PportTimetable(GeneratedsSuper):
    """PportTimetable -- Push Port Timetable Schema
    timetableID -- The ID of the RTTI timetable from which this XML timetable was generated.
    Journey -- Schedule of a service that exists in Darwin
    Association -- An association between two schedules
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, timetableID=None, Journey=None, Association=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.timetableID = _cast(None, timetableID)
        self.timetableID_nsprefix_ = None
        if Journey is None:
            self.Journey = []
        else:
            self.Journey = Journey
        self.Journey_nsprefix_ = None
        if Association is None:
            self.Association = []
        else:
            self.Association = Association
        self.Association_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PportTimetable)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PportTimetable.subclass:
            return PportTimetable.subclass(*args_, **kwargs_)
        else:
            return PportTimetable(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Journey(self):
        return self.Journey
    def set_Journey(self, Journey):
        self.Journey = Journey
    def add_Journey(self, value):
        self.Journey.append(value)
    def insert_Journey_at(self, index, value):
        self.Journey.insert(index, value)
    def replace_Journey_at(self, index, value):
        self.Journey[index] = value
    def get_Association(self):
        return self.Association
    def set_Association(self, Association):
        self.Association = Association
    def add_Association(self, value):
        self.Association.append(value)
    def insert_Association_at(self, index, value):
        self.Association.insert(index, value)
    def replace_Association_at(self, index, value):
        self.Association[index] = value
    def get_timetableID(self):
        return self.timetableID
    def set_timetableID(self, timetableID):
        self.timetableID = timetableID
    def validate_TimetableIDType(self, value):
        # Validate type ct:TimetableIDType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on TimetableIDType' % {"value": encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.Journey or
            self.Association
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='PportTimetable', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PportTimetable')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PportTimetable':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PportTimetable')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PportTimetable', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PportTimetable'):
        if self.timetableID is not None and 'timetableID' not in already_processed:
            already_processed.add('timetableID')
            outfile.write(' timetableID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.timetableID), input_name='timetableID')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"', name_='PportTimetable', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Journey_ in self.Journey:
            namespaceprefix_ = self.Journey_nsprefix_ + ':' if (UseCapturedNS_ and self.Journey_nsprefix_) else ''
            Journey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Journey', pretty_print=pretty_print)
        for Association_ in self.Association:
            namespaceprefix_ = self.Association_nsprefix_ + ':' if (UseCapturedNS_ and self.Association_nsprefix_) else ''
            Association_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Association', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('timetableID', node)
        if value is not None and 'timetableID' not in already_processed:
            already_processed.add('timetableID')
            self.timetableID = value
            self.validate_TimetableIDType(self.timetableID)    # validate type TimetableIDType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Journey':
            obj_ = Schedule.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Journey.append(obj_)
            obj_.original_tagname_ = 'Journey'
        elif nodeName_ == 'Association':
            obj_ = Association.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Association.append(obj_)
            obj_.original_tagname_ = 'Association'
# end class PportTimetable


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    prefix_tag = TagNamePrefix + tag
    rootClass = GDSClassesMapping.get(prefix_tag)
    if rootClass is None:
        rootClass = globals().get(prefix_tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AssocService'
        rootClass = AssocService
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, reverse_mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AssocService'
        rootClass = AssocService
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if mapping is None:
        mapping = {}
    if reverse_mapping is None:
        reverse_mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping,
        reverse_mapping_=reverse_mapping, nsmap_=nsmap)
    reverse_node_mapping = rootObj.gds_reverse_node_mapping(mapping)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_node_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AssocService'
        rootClass = AssocService
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://www.thalesgroup.com/rtti/XmlTimetable/v8"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AssocService'
        rootClass = AssocService
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from rttiCTTSchema_v8 import *\n\n')
        sys.stdout.write('import rttiCTTSchema_v8 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {

}
__all__ = [
    "AssocService",
    "Association",
    "DT",
    "DisruptionReasonType",
    "IP",
    "OPDT",
    "OPIP",
    "OPOR",
    "OR",
    "PP",
    "PportTimetable",
    "Schedule"
]
